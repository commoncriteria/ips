<Module xmlns="https://niap-ccevs.org/cc/v1" xmlns:sec="https://niap-ccevs.org/cc/v1/section" xmlns:h="http://www.w3.org/1999/xhtml" boilerplate="yes" target-product="IPS" target-products="IPSes" name="Intrusion Prevention System (IPS)">

<!--    <cPP/>    -->                                 <!-- This empty element must be included here if this is a cPP. It must not be here if it is not.  -->

<!-- for FP -->
<!--
<Package name="TLS"                                   
    xmlns="https://niap-ccevs.org/cc/v1"
    xmlns:h="http://www.w3.org/1999/xhtml"
    xmlns:sec="https://niap-ccevs.org/cc/v1/section"
-->

<!-- For a PP-Module 
<Module
    name="Widget Clients"                              # Name of the Module  
    xmlns="https://niap-ccevs.org/cc/v1"               # Some html magic
    xmlns:h="http://www.w3.org/1999/xhtml"             # uses the "h" namespace for inline HTML
    xmlns:sec="https://niap-ccevs.org/cc/v1/section"   # The "sec" namespace for sections is available
    target-product="Widget"                            # Name of the TOE product
    target-products="Widgets"                          # Plural name of the TOE product (optional)
    boilerplate="yes"                                  # Whether to use boilerplate text by default (can be disabled in sections)
    short="Wid">                                       # A short name for the PP (e.g. App or MDF)
-->

  <!-- PPReference (all documents) -->
  <PPReference>
    <ReferenceTable>
      <PPVersion>1.1</PPVersion>
      <PPAuthor>National Information Assurance Partnership</PPAuthor>
      <PPPubDate>2025-03-21</PPPubDate>
      <Keywords>IPS</Keywords>
    </ReferenceTable>
  </PPReference>

<!-- Revision History (all documents) -->
  <RevisionHistory>
    <entry>
      <version>1.1</version>
      <date>2025-03-21</date>
      <subject>CC:2022 updates, incorporation of TDs</subject>
    </entry>
    <entry>
      <version>1.0</version>
      <date>2021-05-11</date>
      <subject>Initial publication</subject>
    </entry>
  </RevisionHistory>

  <release-notes><h:h3>TDs Applied</h:h3></release-notes><include-pkg id="pkg-ssh">
    <git>
      <url>https://github.com/commoncriteria/ssh</url>
      <branch>master</branch>
    </git>
    <url>https://www.niap-ccevs.org/protectionprofiles/515</url>
    
  </include-pkg>
  <include-pkg id="pkg-tls">
    <git>
      <url>https://github.com/commoncriteria/tls</url>
      <branch>release-2.0</branch>
    </git>
    <url>https://www.niap-ccevs.org/protectionprofiles/465</url>
    <depends on="fcs-eap-ext-1"/>
  </include-pkg>
  <include-pkg id="pkg-x509">
    <git>
      <url>https://github.com/commoncriteria/X509</url>
      <branch>master</branch>
    </git>
    <url>https://www.niap-ccevs.org/protectionprofiles/511</url>
  </include-pkg>



  <!-- Introduction (all documents) -->
  <sec:Introduction>
    
    <!-- 1.1 Overview --> <!-- change -->
    <sec:Overview>
      The scope of this PP-Module is to describe the security functionality of an Intrusion Prevention System
      (IPS) in terms of <xref g="CC"/> and to define functional and assurance requirements for such products. This PP-Module is intended for use with the following Base-PPs:
      
      <h:ul>
        <h:li>collaborative Protection Profile for Network Devices, Version 3.0E (NDcPP or CPP_ND_V3.0E)</h:li>
      </h:ul>
      
      <h:p>
      This Base-PP is valid because a device that implements IPS is a specific type of network device, and there is nothing about the implementation of IPS that would prevent any of the security capabilities defined by the Base-PP from being satisfied.
      </h:p><h:p>
      A TOE that conforms to a PP-Configuration containing this PP-Module may be a ‘Distributed TOE’ as defined in the NDcPP. For example, the TOE could have distributed ‘sensor’ components monitoring various logically separated networks, each of which reports to a centralized ‘manager’ component for
      configuration of IPS policies and aggregation of IPS data.
      </h:p>
    </sec:Overview>

	
	<!-- CC and Tech terms.  -->
	<!-- CC terms are auto-generated -->
	<!-- All tech terms are generated from the list below. -->
	<!-- You should add and delete tech terms as required by the technology type. -->
	<tech-terms>
	  <!-- To remove an irrlevant CC term from the document, use the <suppress> element -->
      <suppress>Extended Package</suppress>   
      <term full="Anomaly / Anomalous (network traffic)">
	  	Traffic that does not fit into a defined baseline and is therefore unexpected or atypical traffic. 
		Anomalous traffic is not necessarily dangerous, and does not necessarily indicate any threat to the monitored network.
	  </term>
	  <term full="Baseline / Base-lining (network traffic)">
	  	Defining what is to be considered expected or typical network traffic on a monitored
		network. A traffic baseline does not indicate that all traffic that matches the baseline
		is safe, or that the traffic is not a potential threat to the monitored network. For
		example: traffic that matches a baseline can still match a list of known-bad IP
		addresses; or can match signatures of known threats.
	  </term>
	  <term full="Flooding">
	  	Causing an excessive amount of traffic on an IP subnet or targeted against a specific IP address.
	  </term>
	  <term full="Inline mode">
	  	The deployment of the TOE (or TOE component) such that monitored network traffic must flow across the TOE, 
		thus providing the TOE with the opportunity to block the traffic.
	  </term>	  
	  <term full="IPS policy">
	  	Any set of rules for traffic analysis, traffic blocking, signature detection, and/or anomaly detection. Many IPS policies could be defined and stored on the TOE, but an IPS policy will not have any affect unless is applied to (made active on) one or more IPS interfaces.
	  </term>
	  <term full="Normalization (of network traffic)">
	  	Filtering of network traffic such that only the useful packets/fragments are allowed through to the destination. Normalization can only be performed by the TOE when the TOE is deployed in inline mode. Normalization can include filtering out any of
		<comment>Revisit: incomplete sentence for the last section of the "Normalization (of network traffic)" defination</comment>
	  </term>
	  
	  <term full="Profiling (network traffic)">
	  	See base-lining.</term>
	  <term full="Promiscuous mode">
	  	The state of an IPS interface in which it’s listening (collecting and inspecting) network traffic. A promiscuous interface could be one that is only listening and never transmitting traffic, or could be an interface through which traffic flows both inbound and outbound as in an inline mode deployment. </term>
	  <term full="Sensor interface">
	  	Any interface of the TOE that has an IPS policy applied to it.</term>
      <term abbr="DDoS" full="Distributed Denial of Service"/>
	  <term abbr="DoS" full="Denial of Service"/>
	  <term abbr="FTP" full="File Transfer Protocol"/>
	  <term abbr="GRE" full="Generic Route Encapsulation"/>
	  <term abbr="HTTP" full="Hypertext transfer protoco"/>
	  <term abbr="ICMP" full="Internet Control Message Protocol"/>
	  <term abbr="IDS" full="Intrusion Detection System"/>
	  <term abbr="IPS" full="Intrusion Prevention System"/>
	  <term abbr="MAC" full="MAC Media Access Control"/>
	  <term abbr="MPLS" full="MPLS Multiprotocol Label Switching"/>
	  <term abbr="OSI" full="Open Systems Interconnection"/>
	  <term abbr="PP" full="Protection Profile"/>
	  <term abbr="PPTP" full="Point to Point Tunneling Protocol"/>
	  <term abbr="RFC" full="Request for Comment"/>
	  <term abbr="SAR" full="Security Assurance Requirement"/>
	  <term abbr="SFR" full="Security Functional Requirement"/>
	  <term abbr="SQL" full="Structured Query Language"/>
	  <term abbr="SMTP" full="Simple Mail Transfer Protocol"/>
	  <term abbr="ST" full="Security Target"/>
	  <term abbr="TCP" full="Transmission Control Protocol"/>
	  <term abbr="TOE" full="Target of Evaluation"/>
	  <term abbr="ToS" full="Type of Service"/>
	  <term abbr="TSF" full="TOE Security Functionality"/>
	  <term abbr="TTL" full="Time to Live"/>
	  <term abbr="UDP" full="User Datagram Protocol"/>
    </tech-terms>    

	<!-- Other sections can be added here. -->
	<!-- Commen examples include Scope of Document, Intended Audiance, Compliant Targets of Evaluation,
	     TOE Boundary, TOE Operational Environment, and Roles. These sections can also be included in the
		 TOE/PP Overview aove. -->

	<!-- 1.3 TCompliant_Targets_of_Evaluation -->
    <sec:Compliant_Targets_of_Evaluation>
		<h:p>
			This PP-Module specifically addresses network-based IPSs. A conformant IPS is a product that is connected
			to one or more distinct networks and is managed as part of an overall enterprise security solution. In
			particular, a compliant IPS provides network security administrators with the ability to monitor, collect,
			log, and react in real-time to potentially malicious network traffic. This PP-Module is focused on inspecting
			IP traffic (TCP, UDP, ICMP, etc.). This limited scope is intentional for a number of reasons including: to
			define a reasonable boundary for the scope of testing (assurance measures) defined within the PP-Module
			and to allow future PP-Modules to address other IPS and functionality that includes scanners, analyzers,
			sensors, etc. The scope of the PP-Module does not preclude support for inspection of other IP protocols
			(e.g. GRE, ESP, AH), but the scope of this PP-Module does not include the evaluation of non-IP protocols
			including layer 2 protocols, or Ethernet.
   		</h:p><h:p>
			The baseline requirements of this PP-Module are those determined necessary for an Intrusion Prevention
			product, though conformant TOEs may provide IPS functionality entirely independently from other
			network components, and/or be deployed to operate in conjunction with other components of a larger
			enterprise security solution. For example, though all conformant IPS TOEs must have some capacity to
			monitor, collect, analyze, and react to network traffic, a conformant TOE could:</h:p>

			<h:ul>
				<h:li>Monitor all network traffic passively detected by one or more its interfaces, and/or monitor only specific traffic flows that are passed by or through the IPS for inspection.</h:li>
				<h:li>Transmit IPS data to an external audit storage host, and optionally store IPS data internally. IPS audit
				data can be pushed (initiated by the TOE) or pulled (initiated by the remote host). Regardless of
				whether IPS data is pushed or pulled, the transmission must be protected in a manner consistent with
				protected communications required by FAU_STG_EXT.1 of the NDcPP.</h:li>
				<h:li>Analyze network traffic based on rules that an administrator can configure directly on the TOE, and
				optionally analyze network traffic based on rules imported/applied from another system.</h:li>
				<h:li>React independently to potentially malicious traffic (such as by blocking traffic flows, or by
				transmitting session resets to the endpoints), and optionally react in collaboration with non-TOE
				components of the overall enterprise security solution by initiating a connection to non-TOE
				components to cause/configure the non-TOE component to obstruct the traffic flow.</h:li>
			</h:ul>
		<h:p>Many similarities exist between a conformant IPS TOE and an Intrusion Detection System (IDS), but there
		are some important distinctions. The conformant IPS TOE differs from an IDS in that the conformant TOE
		must be capable of initiating a proactive response to terminate/interrupt an active potential threat, and
		to initiate a response in real time that would cause interruption of the suspicious traffic flow. It is not
		sufficient for the TOE to only be able to generate an audit event or other alert when potentially malicious
		traffic is detected. However, the Security Administrator may choose to configure the TOE such that such
		proactive responses are not enabled, and such a configuration would be a valid configuration for the TOE.
		Though a conformant TOE may be deployed with only its IDS functionalities enabled, the conformant TOE
		must demonstrate that capability during the evaluation.</h:p>
		<h:p>Conformant TOEs will detect potentially malicious network traffic using various approaches. Broadly
		speaking, the traffic analysis could be based on identification of ‘known’ threats, or ‘unknown’ threats.
		Identification of ‘known’ threats may be performed through pattern matching, e.g. by matching strings of
		characters within an IP packet, or by matching traffic patterns common with reconnaissance or denial of
		service (DoS) attacks. Identification of ‘unknown’ threats may be performed through use of various forms
		of ‘anomaly’ detection whereby the IPS is provided with (or ‘learns/creates’) a definition of
		‘expected/typical’ traffic patterns, such that it’s able to detect and react to ‘anomalous’
		(unexpected/atypical) traffic patterns.
		</h:p>
		<h:p>The TOE may be a distributed TOE in which some SFRs or elements of SFRs are enforced by separate TOE
		components distributed across an IP network. In such cases, the NDcPP guidance on the handling of
		distributed TOEs applies. This PP-Module does not mandate that specific SFRs be assigned to specific
		components in a distributed TOE; however, it is expected that any TOE component that enforces any IPS
		function must enforce all dependent functionality for management and audit at minimum</h:p>
		<h:p>Deployment scenarios supported by the TOE include those shown in Figure 1, which includes a number of
		possible deployments or use cases for IPS functionality within a single network. Note that this is just an
		example of an IPS deployment where individual devices implement specific IPS functionality differently;
		per the requirements in this PP-Module (specifically IPS_NTA_EXT.1), a conformant TOE must implement
		both promiscuous and inline mode interfaces, though it is not a requirement for every TOE component to
		implement both modes.</h:p>
			<h:ul>
				<h:li>IPS 1 is operating in promiscuous mode, capturing data from two separate networks outside the perimeter firewall, and sending traffic filter updates as needed to the perimeter router and perimeter firewall to block unwanted traffic in real-time.</h:li>
				<h:li>IPS 2 is operating in inline mode, analyzing traffic to and from a wireless network, and blocking in realtime any traffic that violates the admin-defined IPS policies.</h:li>
				<h:li>IPS 3 is operating in a combination of promiscuous mode and inline mode. The IPS has at least one pair of interfaces creating a bridge or routing across the TOE, and is analyzing and filtering traffic in real-time as traffic traverses the TOE. The same IPS has one or more promiscuous interfaces collecting and analyzing traffic traversing within each separate network, and reacting to anomalous activity, worms, or otherwise unapproved activity.</h:li>
			</h:ul>
		<h:p/>
		<figure entity="images/deployment_diagram.PNG" title="Figure 1: TOE Deployment Scenario Diagram" id="OperEnv"/>
	</sec:Compliant_Targets_of_Evaluation>
	<!-- 1.4 TOE_Boundary -->
    <sec:TOE_Boundary>
        <h:p>The physical boundary for a TOE that conforms to this PP-Module is a physical or virtual network device,
		that also provides generalized network device functionality, such as auditing, I&amp;A, and cryptographic
		services for network communications. The TOE may be standalone or distributed, where a distributed TOE
		is one that requires multiple distinct components to operate as a logical whole in order to fulfill the
		requirements of this PP-Module. The TOE’s logical boundary includes all functionality required by the
		Base-PP as well as the IPS functionality and related capabilities that are defined in this PP-Module. Any
		functionality that is provided by the network device that is not relevant to the security requirements
		defined by this PP-Module or the Base-PP is considered to be outside the scope of the TOE.</h:p>
    </sec:TOE_Boundary>


    <!-- 1.5 Use Cases -->
    <sec:Use_Cases>
    	<h:p>
      This PP-Module defines two potential use cases for the IPS TOE, listed below.
    	</h:p><h:p>
      This PP-Module also defines optional and objective requirements for functionality including separation of
      management roles and ability to use the TSF to review collected IPS data. These functions are not
      dependent on a particular use case being chosen.
    	</h:p>
      <usecases>
        <usecase id="usecase1" title="Standalone System">
          <description>
            The TOE exists as a standalone device that is capable of enforcing all of the mandatory requirements
			defined in this PP-Module by itself.

          </description>
        </usecase>
        
        <usecase id="usecase2" title="Distributed System">
          <description>
            The TOE exists as a distributed system that is able to apply different IPS functions to different network
			segments. In this case, distributed nodes may each implement all required IPS functionality, or
			different node types may offer different functions so long as the evaluated configuration collectively
			addresses all of the mandatory requirements defined in this PP-Module. In this deployment, it is
			expected (though not required) that a single device be used as a central point to perform
			configuration and collect relevant log data for the rest of the TOE.
          </description>
        </usecase>
      </usecases>

	  
    </sec:Use_Cases> 
    
 
	

	<!-- Product Features. Required if there are implementation-dependent requirements. -->
	<!-- These are the product features that are defined in order to support implementation-dependent requirements. -->
  <!--
	<section title="Product Features Mapped to Implementation-dependent Requirements" id="sec-features">
		The feature(s) enumerated below, if implemented by the TOE, require that additional SFRs be claimed in the ST.<h:br/>
		<implements>
			<feature id="feat-test1" title="Test Feature 1">
				<description>Description of test feature one.</description>
			</feature>
			<feature id="feat-test2" title="Test Feature 2">
				<description>Description of test feature two.</description>
			</feature>
		</implements>			
	</section>   --><!-- Features -->

</sec:Introduction>   <!-- Introduction  -->


	<!-- cc-version: cc-2022r1 or cc-31r5   -->
	<!-- cc-approach: standard or direct-rationale  -->
	<!-- display: Should this info be displayed in the Conformance -->
	<!-- Claims section? If no, you have to write a free-form section -->
    <section title="Conformance Claims" id="ConformanceClaims">
      
      <!-- 2.1 CC Conformance -->
      <CClaimsInfo cc-version="cc-2022r1" cc-approach="direct-rationale">
        <cc-st-conf>exact</cc-st-conf>
        <cc-pt2-conf>extended</cc-pt2-conf>
        <cc-pt3-conf>conformant</cc-pt3-conf>
        <cc-pp-conf/>
        <cc-pp-config-with>
          <Mod-cc-ref>PP-Module for Stateful Traffic Filter Firewalls, Version 1.4e</Mod-cc-ref>
          <Mod-cc-ref>PP-Module for Virtual Private Network (VPN) Gateways, Version 1.1</Mod-cc-ref>
        </cc-pp-config-with>
        <cc-pkg-claim/>
      </CClaimsInfo>
    </section>  <!-- Conformance Claims -->
  

  
  <sec:Security_Problem_Definition>
  <comment>Switched Security Problem Description(old) to Security_Problem_Definition</comment>
  
    <!-- Arbitrary introductory text -->
  	<h:p>
	The security problem is described in terms of the threats that the TOE is expected to address, assumptions
	about its operational environment, and any organizational security policies that the TOE is expected to
	enforce.
  	</h:p>
  	<h:p>
	IPS devices address a range of security threats related to detection of and reaction to potentially
	malicious traffic on monitored networks, to which the security policies will be enforced on applicable
	network traffic. The malicious traffic may pose a threat to one or more endpoints on the monitored
	networks, to the network infrastructure, or to the TOE itself. The term ‘monitored networks’ is used here
	to represent any network to which the TOE is directly connected, as well as network segments/subnets
	that have had their traffic forwarded (redirected or copied) to the IPS for analysis.

  	</h:p><h:p>
	The term ‘IPS Data’ will be used throughout this PP-Module and includes any or all of: 
	the data extracted from network traffic and stored on the TOE; the results of analysis performed by the TOE; and messages
	that indicate the TOE’s reaction to that analysis. This ‘IPS Data’ described in this PP-Module refers to the
	network traffic collected by the IPS and the resulting audit records related to analysis of that network
	traffic, all of which is separate from the ‘audit data’ as defined in FAU_GEN from the Base-PP, such as
	audit records related to authentication of administrators and establishment/termination of trusted
	channels.
  	</h:p>
  	<h:p>
	A site is responsible for developing its security policy and configuring a rule set that the IPS will enforce
	and provide an appropriate response to meet their needs, relative to their own risk analysis and their
	perceived threats. Threats mitigated by the conformant TOE can include attempts to:
	</h:p>
	<h:p>
		<h:ul>
			<h:li>Perform network-based reconnaissance (probing for information about a monitored network or its endpoints), such as through use of various scanning or mapping techniques. </h:li>
			<h:li>Obstruct the normal function of monitored networks, endpoints, or services, such as through denial of service attacks</h:li>
			<h:li>Gain inappropriate access to one or more networks, endpoints, or services, such as through brute
			force password guessing attacks, or by transmitting malicious executable code, scripts, or
			commands. </h:li>
			<h:li>Disclose/transmit information in violation of policy, such as sending credit card numbers. Note,
			relative to the data, it does not matter where the threat agent is located. Example: data exfiltration
			means that data was removed without proper authorization to remove it. This may be a pull or a
			push. It can result from intrusion from the outside or by the actions of the insider. </h:li>
		</h:ul>
	</h:p>
  	<h:p>Note that this PP-Module does not repeat the threats identified in the NDcPP, though they all apply given
	the conformance and hence dependence of this PP-Module on the NDcPP. Additionally, this PP-Module
	describes TOE functionality (such as security management functions) that are subject to the same threats
	as those that are defined in the NDcPP. A full mapping between threats and objectives is provided in
	Section 4.3 of this PP-Module.
	</h:p>
  	<h:p>The NDcPP contains only threats to the ability of the TOE to provide its own functions. This PP-Module
	defines threats to resources in the operational environment that will be met by an IPS TOE. Together,
	the threats of the Base-PP and those defined in this PP-Module define the comprehensive set of security
	threats addressed by an IPS TOE.</h:p>

    <section title="Threats" id="sec-threats">
	
		<!-- If using the standard approach, each threat references one of more Objectives -->
		<!-- using the <objective-refer> tag.   -->
		<!-- If using direct rationale, each threat references the SFRs that address the threat -->
		<!-- using the <addressed-by> tag.  -->
		The following threats defined in this PP-Module extend the threats defined by the Base-PP.

      <threats>
        <threat name="T.NETWORK_ACCESS" id="t-network-access">
          <description> Unauthorized access may be achieved to services on a protected network from outside that network, or
			alternately services outside a protected network from inside the protected network. If malicious external
			devices are able to communicate with devices on the protected network via a backdoor then those devices
			may be susceptible to the unauthorized disclosure of information.</description>


		  <!-- For direct rationale, use the following format instead of <objective-refer> -->
<!--          <addressed-by>FPT_SBOP_EXT.1</addressed-by><rationale>How the SFR addresses the threat.</rationale>
          <addressed-by>FPT_ASLR_EXT.1</addressed-by><rationale>How the SFR addresses the threat.</rationale>
          <addressed-by>FPT_TUD_EXT.1</addressed-by><rationale>How the SFR addresses the threat.</rationale>
          <addressed-by>FPT_TUD_EXT.2</addressed-by><rationale>How the SFR addresses the threat.</rationale>
-->		  
        </threat>

        <threat name="T.NETWORK_DISCLOSURE" id="t-network-disclosure">
          <description> Sensitive information on a protected network might be disclosed resulting from ingress- or egress-based
	  	  actions. </description>
		  </threat>
		<threat name="T.NETWORK_DOS" id="t-network-dos">
          <description> Attacks against services inside a protected network, or indirectly by virtue of access to malicious agents
		  from within a protected network, might lead to denial of services otherwise available within a protected
		  network. </description>
		</threat>
		<threat name="T.NETWORK_MISUSE" id="t-network-misuse">
          <description> Access to services made available by a protected network might be used counter to operational
		  environment policies. Devices located outside the protected network may attempt to conduct
		  inappropriate activities while communicating with allowed public services (e.g. manipulation of resident
		  tools, SQL injection, phishing, forced resets, malicious zip files, disguised executables, privilege escalation
		  tools, and botnets). </description>
		  
<!--            <addressed-by>FCS_COP.1/HASH</addressed-by><rationale>How the SFR addresses the threat.</rationale>
            <addressed-by>FCS_COP.1/SIGN</addressed-by><rationale>How the SFR addresses the threat.</rationale>
            <addressed-by>FCS_COP.1/KEYHMAC</addressed-by><rationale>How the SFR addresses the threat.</rationale>
            <addressed-by>FPT_ACF_EXT.1</addressed-by><rationale>How the SFR addresses the threat.</rationale>
            <addressed-by>FPT_SRP_EXT.1</addressed-by><rationale>How the SFR addresses the threat.</rationale>
            <addressed-by>FIA_X509_EXT.1</addressed-by><rationale>How the SFR addresses the threat.</rationale>
-->		  
        </threat>
      </threats>
    </section>  <!-- Threats -->
	
	<!-- Assumptions refer to operational objective objectives regardless of whether -->
	<!-- the document uses standard or direct rationale. -->
	
    <sec:Assumptions>
		<h:p>
		All assumptions for the operational environment of the Base-PP also apply to this PP-Module.
		A.NO_THRU_TRAFFIC_PROTECTION is still operative, but only for the interfaces in the TOE that are
		defined by the Base-PP and not the PP-Module.
		</h:p><h:p>
		The following additional assumption is made on the operational environment in order to be able to
		ensure that the security functionality specified in the PP-Module can be provided by the TOE. If the TOE
		is placed in an operational environment that does not meet this assumption, the TOE may no longer be
		able to provide all of its security functionality.
		</h:p>

      <assumptions>
        <assumption name="A.CONNECTIONS">
          <description> It is assumed that the TOE is connected to distinct networks in a manner that ensures that the TOE security policies will be enforced on all applicable network traffic flowing among the attached networks. </description>
          <objective-refer ref="OE.CONNECTIONS">
            <rationale> The objective supports the
			assumption by setting the
			expectation that
			administrators will deploy the
			TOE in such a manner that
			there is no network path that
			will be exempt from the TOE’s
			inspection capabilities. </rationale>
          </objective-refer>
        </assumption>
      </assumptions>
    </sec:Assumptions>  <!-- Assumptions -->
	
	<!-- OSPs refer to Objectives or OE Objectives in standard approach documents. -->
	<!-- In direct rationale PPs, they should refer to OE Objectives -->
    <sec:Organizational_Security_Policies>

      <OSPs>

      	
        <OSP name="P.ANALYZE">
		  <description>Analytical processes and information to derive conclusions about potential intrusions must be applied to IPS data and appropriate response actions taken.</description>
          <objective-refer ref="OE.CONNECTIONS">
            <rationale>The operational environment's ability to facilitate network connections is necessary for the policy to analyze the network traffic associated with these connections.</rationale>
          </objective-refer>
        </OSP>
      </OSPs>
    </sec:Organizational_Security_Policies>
  </sec:Security_Problem_Definition> <!-- Security Problem Definition -->
  
  
  <!-- This section is mandatory for standard approach documents.   -->
  <!-- It should be included in direct rationale documents if there are OE Objectives. -->
  <sec:Security_Objectives>

	<!-- This section is included in direct rationale documents if there are OE Objectives -->
    <sec:Security_Objectives_for_the_Operational_Environment>
		<h:p>
		All objectives for the operational environment of the Base-PP also apply to this PP-Module.
		OE.NO_THRU_TRAFFIC_PROTECTION is still operative, but only for the interfaces in the TOE that are
		defined by the Base-PP and not the PP-Module.

		</h:p>
		<h:p>This PP-Module defines the following additional environmental security objectives, which extend those
		defined in the Base-PP.</h:p>

	  <SOEs>
        <SOE name="OE.CONNECTIONS">
          <description>TOE administrators will ensure that the TOE is installed in a manner that will allow the TOE to effectively
enforce its policies on network traffic of monitored networks.</description>
        </SOE>
      </SOEs>
      </sec:Security_Objectives_for_the_Operational_Environment>  <!-- OE Objectives -->

	<!-- This section is automatically generated, but this placeholder is reuired -->
    <section title="Security Objectives Rationale" id="sec-sor"/>

  </sec:Security_Objectives>  <!-- Security_Objectives  -->


  
  <sec:Security_Requirements>
    <base-pp id="ND" version="3.0e" name="Network Device" product="Network Device" short="ND" plural="Network Devices">
      <url>https://www.niap-ccevs.org/protectionprofiles/482</url>
      <cPP/>
      <sec-func-req-dir> 
        In a PP-Configuration that includes the NDcPP, the TOE is expected to rely on some of the security
		functions implemented by the network device as a whole and evaluated against the Base-PP. However,
		this PP-Module does not change how any of the NDcPP functions are implemented so there is no
		modification to the NDcPP SFRs used with this PP-Module. Note in particular that requirements that apply
		to distributed TOEs (e.g. FCO_CPC_EXT.1, FPT_ITT.1) remain optional as this PP-Module supports but does
		not mandate a distributed deployment.
      </sec-func-req-dir>
      <modified-sfrs/>
      <additional-sfrs/>
      <con-toe>
        When this PP-Module is used to extend the NDcPP, the TOE type for the overall TOE is still a network
		device. The TOE boundary is simply extended to include IPS functionality that is provided by the network
		device.
      </con-toe>
      <con-sec-prob>
	  The threats defined by this PP-Module (see section 3.1) supplement those defined in the NDcPP as follows:
	  </con-sec-prob>
      <con-obj/>
      <con-op-en>The objectives for the TOE’s operational environment are consistent with the NDcPP based on the following rationale: </con-op-en>
      
      
      <con-mod ref="T.NETWORK_ACCESS">
	  The NDcPP only defines a security problem that relates to network traffic
	bound to or originating from the TOE. This PP-Module expands the security
	problem to include a logical interface for network traffic between two nonTOE endpoints that is intercepted (inline) or observed (promiscuous) by the
	TSF. This is not inconsistent because the PP-Module introduces a new logical
	interface for this functionality that is beyond the scope of the NDcPP.
	  </con-mod>
      <con-mod ref="T.NETWORK_DISCLOSURE">
	  The NDcPP only defines a security problem that relates to network traffic
	  bound to or originating from the TOE. This PP-Module expands the security
	  problem to include a logical interface for network traffic between two nonTOE endpoints that is intercepted (inline) or observed (promiscuous) by the
	  TSF. This is not inconsistent because the PP-Module introduces a new logical
	  interface for this functionality that is beyond the scope of the NDcPP.
	  </con-mod>
	  <con-mod ref="T.NETWORK_DOS">
	  The NDcPP only defines a security problem that relates to network traffic
		bound to or originating from the TOE. This PP-Module expands the security
		problem to include a logical interface for network traffic between two nonTOE endpoints that is intercepted (inline) or observed (promiscuous) by the
		TSF. This is not inconsistent because the PP-Module introduces a new logical
		interface for this functionality that is beyond the scope of the NDcPP.
	  </con-mod>
	  <con-mod ref="T.NETWORK_MISUSE">
	  The NDcPP only defines a security problem that relates to network traffic
		bound to or originating from the TOE. This PP-Module expands the security
		problem to include a logical interface for network traffic between two nonTOE endpoints that is intercepted (inline) or observed (promiscuous) by the
		TSF. This is not inconsistent because the PP-Module introduces a new logical
		interface for this functionality that is beyond the scope of the NDcPP.
	  </con-mod>
	  <con-mod ref="T.NETWORK_MISUSE">
	  The NDcPP only defines a security problem that relates to network traffic
  	  bound to or originating from the TOE. This PP-Module expands the security
	  problem to include a logical interface for network traffic between two nonTOE endpoints that is intercepted (inline) or observed(promiscuous) by the
	  TSF. This is not inconsistent because the PP-Module introduces a new logical
	  interface for this functionality that is beyond the scope of the NDcPP.
	  </con-mod>
	  <con-mod ref="A.CONNECTIONS">
	  This assumption requires a specific network configuration to ensure that
		network traffic cannot be routed in a way that allows it to bypass the TOE’s
		inspection interfaces. This does not interfere with any of the assumptions in the NDcPP because the NDcPP doesn’t make any assumptions about the
		TOE’s position in a network architecture. 
	  </con-mod>
	  <con-mod ref="P.ANALYZE">
	  This organizational security policy does not conflict with the NDcPP because
		it sets expectations for administrative use of the data that is specifically
		collected by the TOE’s IPS function.
	  </con-mod>
	  
    </base-pp>
	<man-sfrs>
    

		<!-- Audit table for Mandatory SFRs -->
	  <section id="ss-audit-table" title="Auditable Events for Mandatory SFRs">
	    <audit-table table="mandatory" id="mandatory-audit-events">
	      <h:br/><h:b><ctr ctr-type="Table" pre="Table " id="atref-mandatory">: Auditable Events for Mandatory SFRs</ctr></h:b>
	    </audit-table>
		<comment>some audits end without completing the sentence.</comment>
	  </section>

		<!-- Section for SFR Class -->
		
		
			<!-- If this Class does not exist in the CC, then you need the following. -->
			<!-- Try not to create new classes. -->
<!--	        <class-description>A description of the new class.</class-description>        
			<ext-comp-class class="ClassName (ClassAbbr)">
				<description>Not sure what this is for.</description>
			</ext-comp-class>
-->
	
			<!-- For each family in the class that includes one or more  extended components  -->
			<!-- you need to povide an extended component definition like this. -->
<!--	        <ext-comp-def title="Cryptographic Key Management" fam-id="FCS_CKM_EXT">
			<fam-behavior>This family defines requirements for management of cryptographic keys.
				FCS_CKM_EXT.4 is necessary because FCS_CKM.4 does not include a requirement for the timing of 
				key destruction.
				FCS_CKM_EXT.5 is necessary to express requirements for key derivation, which are missing from Part 2. 
				</fam-behavior>
			</ext-comp-def>
-->			
			<!-- Next define all the components in the Class -->
			<!-- name: Name of the requirement as it should appear in the document -->
			<!-- id: Should look something like this, but it just needs to be unique in the document -->
			<!-- cc-id" This is a lower-case version of the SFR name as it would appear in a document -->
			<!-- iteration: This attribute is required only if the SFR is an iteration -->
			<section title="Security Audit (FAU)" id="m-fau">
			<f-component name="Audit Data Generation (IPS)" cc-id="fau_gen.1" iteration="IPS" id="fau-gen-1-ips">
				<f-element id="fau-gen-1e1-ips">
				<title>
				The TSF shall be able to generate an <h:b>IPS</h:b> audit record of the following <h:b>IPS</h:b>
				auditable events: <h:ol type="a">
					<h:li>Start-up and shut-down of the <h:b>IPS</h:b> functions;</h:li>
					<h:li>All <h:b>IPS</h:b> auditable events for the [<h:i>not specified</h:i>] level of audit; and</h:li>
					<h:li>[<h:i>All dissimilar IPS events;</h:i></h:li>
					<h:li><h:i>All dissimilar IPS reactions;</h:i></h:li>
					<h:li><h:i>Totals of similar events occurring within a specified time period;</h:i></h:li>
					<h:li><h:i>Totals of similar reactions occurring within a specified time period;</h:i></h:li>
					<h:li><h:i>The events in the IPS Events table. </h:i></h:li>
					<h:li><selectables>
						<selectable><h:i>no other auditable events, </h:i></selectable>
							<selectable>
								<assignable><h:i>other auditable events</h:i></assignable>
							</selectable>
							
						</selectables>
						
					</h:li>
				
					</h:ol>
				</title>            
				<note role="application">
					<h:p><h:i>
					This SFR exists in addition to the FAU_GEN.1 SFR in the Base-PP. All required
					auditable events from the Base-PP still apply. As the data that this SFR addresses
					is still considered to be “audit data,” the requirement for secure remote
					transmission per FAU_STG_EXT.1 applies to this SFR in the same manner as the
					Base-PP’s iteration of FAU_GEN.1.
					</h:i></h:p><h:p><h:i>
					The ST author is not limited to the list presented and should update the list of
					auditable events with any additional information generated. The ST Author
					should use FAU_GEN.1 as defined in the Base-PP for standard (non-IPS data)
					audit functions.
					</h:i></h:p><h:p><h:i>
					For all requirements marked as optional, it is expected that if the requirement is
					claimed, the corresponding IPS events should be generated by the TSF; if the
					requirement is not claimed, then the ST author may also omit these events.
					</h:i></h:p><h:p><h:i>
					With regards to ‘similar’ and ‘dissimilar’ type events, dissimilar events are those
					whose characteristics differ from other events by something other than merely a
					timestamp, whereas ‘similar’ events are multiple occurrences of the same
					auditable event within some time period where the only significant difference
					between these events is the timestamp. For example, it is not expected that the
					TOE generate an individual audit message for every event of the same kind that
					occurs within a reasonable time period (e.g. the TSF need only generate one audit
					message for an event that repeated X times during Y seconds).
					</h:i></h:p>
				</note>
				<aactivity>      <!-- at minimum, only the last f-element in the f-component needs to have this -->
   						<TSS>
						The evaluator shall verify that the TSS describes how the TOE can be configured to log IPS data associated with applicable policies.
						<h:br/>
						The evaluator shall verify that the TSS describes what (similar) IPS event types the TOE will combine into a single audit record along with the conditions (e.g., thresholds and time periods) for so doing. The TSS shall also describe to what extent (if any) that may be configurable.
						<h:br/>
						For IPS_SBD_EXT.1, for each field, the evaluator shall verify that the TSS describes how the field is inspected and if logging is not applicable, any other mechanism such as counting that is deployed.
						</TSS>
						<Guidance>
						The evaluator shall verify that the operational guidance describes how to configure the TOE to result in applicable IPS data logging.
						</Guidance>
						<Tests>
						The evaluator shall test that the interfaces used to configure the IPS polices yield expected IPS data in association with the IPS policies. A number of IPS policy combination and ordering scenarios need to be configured and tested by attempting to pass both allowed and anomalous network traffic matching configured IPS policies in order to trigger all required IPS events.
						<h:br/>
						Note the following:<h:ul><h:li>This activity should have been addressed with a combination of the Test EAs for the other IPS requirements</h:li>
						<h:li>As part of testing this activity, the evaluator shall also ensure that the audit data generated to address this SFR can be handled in the manner that FAU_STG_EXT.1 requires for all audit data.</h:li></h:ul>
						</Tests>
				</aactivity>

				</f-element>
				<f-element id="fau-gen-1e2-ips">
					<title>The TSF shall record within each <h:b>IPS auditable event</h:b> record at least the following information: <h:ol type="a">
						<h:li>Date and time of the event, type of event <h:b>and/or reaction,</h:b> <h:s>subject identity, and the outcome (success or failure) of the event; and;</h:s></h:li>
						<h:li>For each <h:b>IPS auditable event</h:b> type, based on the auditable event definitions of the functional components included in the PP<h:s>/ST</h:s>, [<h:i>information specified in column three of the IPS Events table].</h:i></h:li>
						<comment>Update the second selection to properly have UPS Auidtable evet bolded, just like the first one.</comment>
					</h:ol>

					</title>
					<note role="application">
					<h:p><h:i> For IPS_SBD_EXT.1 and IPS_ABD_EXT.1 there may be several circumstances in
					which it would not be necessary to explicitly identify the action within the audit
					messages. For example, if the TOE’s action is implied within the policy definition
					or if the default action is to allow traffic, then the absence of ‘blocked’ would
					imply the traffic was allowed.
					</h:i></h:p><h:p><h:i>
					For IPS_SBD_EXT.1, if certain header fields are inspected and dropped or modified
					by default (e.g., packets with bad checksum, reserved bits set to zero), this logging
					requirement is not applicable.
					</h:i></h:p><h:p><h:i>
					The ST author should update IPS Events table below with any additional
					information generated such as source and destination addresses, IP, signature
					that trigged event, port, etc.</h:i></h:p>
					</note>
					<aactivity>      <!-- at minimum, only the last f-element in the f-component needs to have this -->
   						<TSS>
						</TSS>
						<Guidance>
						</Guidance>
						<Tests>
						</Tests>
					</aactivity>
				</f-element>
			</f-component>
			</section>
			
			
			<section title="Security Management (FMT)" id="m-fmt">
			<f-component name="Specification of Management Functions (IPS)" cc-id="fmt_smf.1" iteration="IPS" id="fmt-smf-1">
				<f-element id="fmt-smf-1-1-ips">
				<title>
				The TSF shall be capable of performing the following management functions: [
					<h:i><h:ul>
					<h:li>Enable, disable signatures applied to sensor interfaces, and determine the behavior of IPS functionality</h:li>
					<h:li>Modify these parameters that define the network traffic to be collected and analyzed:</h:li>
					<h:ul>
						<h:li>Source IP addresses (host address and network address)</h:li>
						<h:li>Destination IP addresses (host address and network address)</h:li>
						<h:li>Source port (TCP and UDP)</h:li>
						<h:li>Destination port (TCP and UDP)</h:li>
						<h:li>Protocol (IPv4 and IPv6)</h:li>
						<h:li>ICMP type and code</h:li>
					</h:ul>
					<h:li>Update (import) signatures</h:li>
					<h:li>Create custom signatures</h:li>
					<h:li>Configure anomaly detection</h:li>
					<h:li>Enable and disable actions to be taken when signature or anomaly matches are detected</h:li>
					<h:li>Modify thresholds that trigger IPS reactions</h:li>
					<h:li>Modify the duration of traffic blocking actions</h:li>
					<h:li>Modify the known-good and known-bad lists (of IP addresses or address ranges)</h:li>
					<h:li>Configure the known-good and known-bad lists to override signaturebased IPS policies</h:li>
					</h:ul></h:i>
					].
				</title>            
				<aactivity>      <!-- at minimum, only the last f-element in the f-component needs to have this -->
   					<TSS>
					The evaluator shall verify that the TSS describes how the IPS data analysis and reactions can be configured.This may be performed in conjunction with the evaluation of IPS_ABD_EXT.1, IPS_IPB_EXT.1, and IPS_SBD_EXT.1.</TSS>
					<Guidance>
					The evaluator shall verify that the operational guidance describes the instructions for each function
					defined in the SFR, describes how to configure the IPS data analysis and reactions, including how to set
					any configurable defaults and how to configure each of the applicable analysis pattern matching methods
					and reaction modes.
					</Guidance>
					<Tests>
					The evaluator shall perform the following tests:
					<testlist>
						<test>The evaluator shall use the operational guidance to create a signature and enable it on an interface. The evaluator shall then generate traffic that would be successfully triggered by the signature. The evaluator should observe the TOE applying the corresponding reaction in the signature.</test>
						<test>The evaluator shall then disable the signature and attempt to regenerate the same traffic and ensure that the TOE allows the traffic to pass with no reaction.</test>
						<test> The evaluator shall use the operational guidance to import signatures and repeat the test conducted in Test 1.</test>
						</testlist>
						Other testing for this SFR is performed in conjunction with the EAs for IPS_ABD_EXT.1 and IPS_SBD_EXT.1.
					</Tests>
            	</aactivity>
                </f-element>	

				</f-component>
			</section>
			<!-- NEW SFR-->
						<section title="Intrusion Prevention (IPS)" id="ips">
			<f-component name="Anomaly-Based IPS Functionality" cc-id="fip_abd_ext.1" id="ips-adb-ext-1-ips">
				<f-element id="ips-adb-ext-1e1">
				<title>
				The TSF shall support the definition of <selectables>
					<selectable>baselines (‘expected and approved’)</selectable>
					<selectable>anomaly (‘unexpected’) traffic patterns</selectable>
					<selectable/>
				</selectables> including the specification of <selectables linebreak="yes">
					<selectable>throughput (<assignable> data elements (e.g. bytes, packets, etc.) per time period (e.g. minutes, hours, days)</assignable>) </selectable>
					<selectable>time of day;</selectable>
					<selectable>frequency;</selectable>
					<selectable>thresholds;</selectable>
					<selectable>[ <assignable>other methods</assignable> ]</selectable>
					</selectables>
					and the following network protocol fields:
					<h:ul>
						<h:li><selectables>
						<selectable> all packet header and data elements defined in IPS_SBD_EXT.1;</selectable>
						<selectable><assignable> subset list of packet header and data elements from IPS_SBD_EXT.1 </assignable></selectable>
						</selectables></h:li>
					</h:ul>
				</title>  
					<note role="application">
					Baselines are the definition of known-good traffic (to be allowed per
					IPS_ABD_EXT.1.3) whilst anomaly traffic is definition of (‘offending’) traffic that is
					to be handled per other actions defined in IPS_ABD_EXT.1.3. Frequency can be
					defined as a number of occurrences of an event (such as detection of packets
					matching a signature) over a defined period of time, such as the number of new
					FTP sessions established during 1 hour. Thresholds can be defined as an amount
					or percentage of deviation from expected levels or limits, such as a number of
					megabytes of data transferred via FTP per hour. 
					</note>
	          
				<aactivity>      <!-- at minimum, only the last f-element in the f-component needs to have this -->
   						<TSS>The evaluator shall verify that the TSS describes the composition, construction, and application of baselines or anomaly-based attributes specified in IPS_ABD_EXT.1.1.
						<h:br/>
						If ‘frequency’ is selected in IPS_ABD_EXT.1.1, the TSS shall include an explanation of how frequencies can be defined on the TOE.
						<h:br/>
						If ‘thresholds’ is selected in IPS_ABD_EXT.1.1, the TSS shall include an explanation of how the thresholds can be defined on the TOE.
						<h:br/>
						The evaluator shall verify that each baseline or anomaly-based rule can be associated with a reaction specified in IPS_ABD_EXT.1.3.
						<h:br/>
						The evaluator shall verify that the TSS identifies all interface types capable of applying baseline or
						anomaly-based rules and explains how they are associated with distinct network interfaces. Where
						interfaces can be grouped into a common interface type (e.g., where the same internal logical path is
						used, perhaps where a common device driver is used) they can be treated collectively as a distinct network
						interface.
						</TSS>
						<Guidance>
						The evaluator shall verify that the operational guidance provides instructions to manually create baselines
						or anomaly-based rules according to the selections made in IPS_ABD_EXT.1.1. Note that dynamic
						“profiling” of a network to establish a baseline is outside the scope of the PP-Module
						<h:br/>
						The evaluator shall verify that the operational guidance provides instructions to associate reactions specified in IPS_ABD_EXT.1.3 with baselines or anomaly-based rules.
						<h:br/>
						The evaluator shall verify that the operational guidance provides instructions to associate the different policies with distinct network interfaces.
						</Guidance>
						<Tests>
						The evaluator shall perform the following tests:<testlist>
						<test>The evaluator shall use the instructions in the operational guidance to configure baselines or anomaly-based rules for each attributes specified in IPS_ABD_EXT.1.1. The evaluator shall send traffic that does not match the baseline or matches the anomaly- based rule and verify the TOE applies the configured reaction. This shall be performed for each attribute in IPS_ABD_EXT.1.1.</test>
						<test>The evaluator shall repeat the test above to ensure that baselines or anomaly- based rules can be defined for each distinct network interface type supported by the TOE.</test>
						</testlist>
						</Tests>
				</aactivity>
				</f-element>
				<f-element id="ips-adb-ext-1e2">
				<title>
				The TSF shall support the definition of anomaly activity through <selectables><selectable>manual configuration by administrators</selectable><selectable>automated configuration</selectable></selectables>
				</title>
				<note role="application">
				The “baseline” and “anomaly” can be something manually defined/configured
				by a TOE administrator (or importing definitions), or something that the TOE is
				able to automatically define/create by inspecting network traffic over a period
				of time (a.k.a. “profiling”). It is not essential for the IPS TOE to have a capability
				of “profiling” a network to dynamically defining a baseline or rule; if the product
				has this functionality, it is outside the scope of this PP-Module.
				</note>
				
				</f-element>
				<f-element id="ips-adb-ext-1e3">
				<title>
				The TSF shall allow the following operations to be associated with anomalybased IPS policies:
				<h:ul>
					<h:li>In any mode, for any sensor interface: <selectables linebreak="yes">
						<selectable>allow the traffic flow</selectable>
							<selectable>send a TCP reset to the source address of the offending traffic</selectable>
							<selectable>send a TCP reset to the destination address of the offending traffic</selectable>
							<selectable>send an ICMP
								<selectables>
									<selectable>host</selectable>
									<selectable>destination</selectable>
									<selectable>port</selectable>
								</selectables>
								unreachable message
								</selectable>
							<selectable>trigger a non-TOE network device to block the offending traffic pattern</selectable>
					</selectables></h:li>
					In inline mode:
						<h:ul>
							<h:li><h:i>[allow the traffic flow</h:i></h:li>
							<h:li><h:i>block/drop the traffic flow</h:i></h:li>
							<h:li><h:i>and</h:i> 
									<selectables>
										<selectable>modify and forward packets before they pass through the TOE</selectable>
										<selectable>no other actions</selectable>
									</selectables></h:li>
						</h:ul>
					
				</h:ul>
				</title>
				<aactivity>      <!-- at minimum, only the last f-element in the f-component needs to have this -->
   					<no-tests/>   <!-- use this inside the aactivity tag to specify that there are no EAs for the SFR (if just doing <aactivity/> doesn't work) -->
				</aactivity>
				</f-element>
				<audit-event>
					<audit-event-descr>Inspected traffic matches an anomaly-based IPS policy.</audit-event-descr>
					<audit-event-info>Source and destination IP addresses.</audit-event-info>
					<audit-event-info>The content of the header fields that were determined to match the policy.</audit-event-info>
					<audit-event-info>TOE interface that received the packet.</audit-event-info>
					<audit-event-info>Aspect of the anomaly-based IPS policy rule that triggered the event (e.g. throughput, time of day, frequency, etc.).</audit-event-info>
					<audit-event-info>Network-based action by the TOE (e.g. allowed, blocked, sent reset to source IP, sent blocking notification to firewall). </audit-event-info>
				</audit-event>
				</f-component>
				<f-component name="IP Blocking" cc-id="ips_ipb_ext.1" id="ips-ipb-ext-1-ips">
				<f-element id="ips-ipb-ext-1e1">
					<title>
					The TSF shall support configuration and implementation of known-good and known-bad lists of <selectables>
						<selectable>source</selectable>
						<selectable>destination</selectable>
						</selectables> IP addresses and <selectables>
						<selectable>no additional address types</selectable>
						<selectable>
							<assignable>list of address types</assignable>
							</selectable></selectables>

					</title>
					<note role="application">
						The address types defined in this SFR are limited to IP addresses (e.g. a single IP
						address or a range of IP addresses) because this IPS PP-Module is limited to
						inspection of IP traffic. IPS TOEs are not prohibited from enabling functionality
						that would allow/prohibit traffic flow based on other address types, such as
						MAC addresses.
					</note>
				<aactivity>      <!-- at minimum, only the last f-element in the f-component needs to have this -->
   					<TSS>The evaluator shall verify how good/bad lists affect the way in which traffic is analyzed with respect to processing packets. The evaluator shall also very that the TSS provides details for the attributes that create a known good list, a known bad list, and their associated rules, including how to define the source or destination IP address (e.g. a single IP address or a range of IP addresses).
					<h:br/>
					If the TSF uses address types other than a single IP or a range of IP addresses (e.g. MAC addresses), the
					evaluator shall check that the TSS explains what configurations would cause non-IP lists of known-good
					and known-bad addresses to take precedence over IP-based address lists.
					<h:br/>
					The evaluator shall also verify that the TSS identifies all the roles and level of access for each of those roles that have been specified in the requirement.
					</TSS>
					<Guidance>
					The evaluator shall verify that the administrative guidance provides instructions with how each role
					specified in the requirement can create, modify and delete the attributes of a known good and known
					bad lists.
					<h:br/>
					If the TSF uses address types other than a single IP or a range of IP addresses (e.g. MAC addresses), the
					evaluator shall check that the operational guidance includes instructions for any configurations that would
					cause non-IP lists of known-good and known-bad addresses to take precedence over IP-based address
					lists.
					</Guidance>
					<Tests>
					The evaluator shall perform the following tests:
					<testlist>
						<test>The evaluator shall use the instructions in the operational guidance to create a known-bad address
						list. Using a single IP address, a list of addresses or a range of addresses from that list, the evaluator shall
						attempt to send traffic through the TOE that would otherwise be allowed by the TOE and observe the TOE
						automatically drops that traffic.</test>
						<test>The evaluator shall use the instructions in the operational guidance to create a known-good
						address list. Using a single IP address, a list of addresses or a range of addresses from that list, the
						evaluator shall attempt to send traffic that would otherwise be denied by the TOE and observe the TOE
						automatically allowing traffic.</test>
						<test>The evaluator shall add conflicting IP addresses to each list and ensure that the TOE handles
						conflicting traffic in a manner consistent with the precedence in IPS_NTA_EXT.1.1.
						</test>
					</testlist>
					</Tests>
				</aactivity>
				</f-element>
				<f-element id="ips-ipb-ext-1e2">
					<title>
					The TSF shall allow [Security Administrators] to configure the following IPS policy elements: <selectables> 
						<selectable>known-good list rules</selectable> 
						<selectable>known-bad list rules</selectable>
						<selectable>IP addresses</selectable>
						<selectable> <assignable>other IPS policy elements </assignable></selectable>
						<selectable>no other IPS policy elements</selectable>
						</selectables>.
					</title>
					<aactivity>      <!-- at minimum, only the last f-element in the f-component needs to have this -->
   					<no-tests/>   <!-- use this inside the aactivity tag to specify that there are no EAs for the SFR (if just doing <aactivity/> doesn't work) -->
					</aactivity>
				</f-element>
				<audit-event>
				<audit-event-descr>Inspected traffic matches a list of known-good or known-bad addresses applied to an IPS policy.</audit-event-descr>
				<audit-event-info>Source and destination IP addresses (and, if applicable, indication of whether the source and/or destination address matched the list).</audit-event-info>
				<audit-event-info>TOE interface that received the packet.</audit-event-info>
				<audit-event-info>Network-based action by the TOE (e.g. allowed, blocked, sent reset).</audit-event-info>
				</audit-event>
				</f-component>
				<f-component name="Network Traffic Analysis" cc-id="ips_nta_ext.1" id="ips-nta-ext-1-ips">
				<f-element id="ips-nta-ext-1e1">
					<title>
					The TSF shall perform analysis of IP-based network traffic forwarded to the
					TOE’s sensor interfaces, and detect violations of administratively-defined IPS
					policies.

					</title>
					<note role="application">
						Though it might be the case in some TOEs that any TOE interface can be a sensor
						interface, that capability is not a requirement. This SFR uses the term “sensor
						interface” to refer to any TOE interface to which one or more IPS policy has been
						applied. An administratively-defined IPS policy is any set of rules for traffic
						analysis, traffic blocking, signature detection, and/or anomaly detection applied
						to one or more TOE interfaces. The TOE may be capable of allowing the
						administrator to configure the precedence of IPS policy elements (known-good
						lists, known-bad lists, signature-based rules, and anomaly- based rules), but any
						such configurability is not required by this PP-Module.
					</note>
					<aactivity>      <!-- at minimum, only the last f-element in the f-component needs to have this -->
						<TSS>
						The evaluator shall verify that the TSS explains the TOE’s capability of analyzing IP traffic in terms of the
						TOE’s policy hierarchy (precedence). The TSS should identify if the TOE’s policy hierarchy order is
						configurable by the administrator for IPS policy elements (known-good lists, known-bad lists, signaturebased rules, and anomaly-based rules).
						<h:br/>
						Regardless of whether the precedence is configurable, the evaluator shall verify that the TSS describes
						the default precedence as well as the IP analyzing functions supported by the TOE.
						</TSS>
						<Guidance>
						The evaluator shall verify that the guidance describes the default precedence.
						<h:br/>
						If the precedence is configurable, the evaluator shall verify that the guidance explains how to configure the precedence.
						</Guidance>
						<Tests>
						There are no test EAs for this element.
						</Tests>
					</aactivity>
				</f-element>
				<f-element id="ips-nta-ext-1e2">
					<title>
					The TSF shall process (be capable of inspecting) the following network traffic protocols:	
					<h:ul>
					<h:li>[Internet Protocol version 4 (IPv4), RFC 791</h:li>
					<h:li>Internet Protocol version 6 (IPv6), RFC 2460</h:li>
					<h:li>Internet control message protocol version 4 (ICMPv4), RFC 792</h:li>
					<h:li>Internet control message protocol version 6 (ICMPv6), RFC 2463</h:li>
					<h:li>Transmission Control Protocol (TCP), RFC 793</h:li>
					<h:li>User Data Protocol (UDP), RFC 768].</h:li>


					</h:ul>
					</title>
						<note role="application">The identification of protocol RFCs does not imply that the TOE must ensure all
							packets are conformant to the identified protocol RFCs at all times, nor does it
							imply that the TOE would be able to enforce full conformance with the RFCs for
							any traffic flow at any time. The identification of RFCs provides a frame of
							reference for understanding the packet contents (headers, fields, states,
							commands, etc.) identified else in this and other SFRs. The implication is that the
							TOE must be capable of understanding the RFC implementation to the extent the
							RFC parameters are identified throughout the SFRs.
						</note>					
					
					<aactivity>      <!-- at minimum, only the last f-element in the f-component needs to have this -->
						<TSS>
						The evaluator shall verify that the TSS indicates that the following protocols are supported:
						<h:ul>
							<h:li>IPv4</h:li>
							<h:li>IPv6</h:li>
							<h:li>ICMPv4</h:li>
							<h:li>ICMPv6</h:li>
							<h:li>TCP</h:li>
							<h:li>UDP</h:li>
						</h:ul>						
						The evaluator shall verify that the TSS describes how conformance with the identified protocols has been
						determined by the TOE developer (e.g., third party interoperability testing, protocol compliance testing).
												
						</TSS>
						<Guidance>
						There are no guidance EAs for this element.
						</Guidance>
						<Tests>
						There are no test EAs for this element.
						</Tests>
					</aactivity>
				</f-element>
				<f-element id="ips-nta-ext-1e3">
					<title>
					The TSF shall allow the signatures to be assigned to sensor interfaces configured
					for promiscuous mode, and to interfaces configured for inline mode, and
					support designation of one or more interfaces as ‘management’ for communication between the TOE and external entities without simultaneously
					being sensor interfaces.
					<h:ul>
					<h:li>Promiscuous (listen-only) mode: <assignable>list of interface types</assignable></h:li>
					<h:li>Inline (data pass-through) mode: <assignable>list of interface types</assignable></h:li>
					<h:li>Management mode:<assignable>list of interface types</assignable></h:li>
					<h:li><selectables linebreak="yes">
					<selectable>[Session-reset-capable interfaces:<assignable>list of session-reset-capable interfaces</assignable></selectable>
				    <selectable><assignable>other interface types</assignable>]</selectable>
				    <selectable>no other interface types</selectable></selectables>.</h:li>
					</h:ul>
					</title>
					<note role="application">
					<h:p>
					Interface types may be Ethernet, Gigabit Ethernet, etc. Promiscuous interfaces
					are ones that listen to network traffic for the sole purpose of inspecting the
					traffic, but do not provide any OSI Layer 2, Layer 3, or higher layer functionality,
					so network services are not listening on the interface, and no IP protocol stack
					enabled on the interface so no IP address is assigned to the interface. Inline
					interfaces are interface pairings that provide a path for network traffic to
					traverse the TOE such that traffic flows can be blocked or modified by the TOE in
					real-time. Like promiscuous interfaces, inline interfaces typically do not support
					OSI Layer 3 and higher functionality, though they may provide OSI Layer 2
					functionality (with MAC address assigned to the interfaces) to allow adjacent
					network devices to forward traffic to/through the TOE.
					</h:p>
					<h:p>The TOE may support separate interfaces to be used for
					administration/management purposes that can be configured as OSI Layer 3
					interfaces for communication between the TOE and remote entities including all
					entities defined in FTP_ITC, and FTP_TRP. The TOE may optionally support
					additional interface types. Session-reset interfaces can be the same as any of the
					promiscuous, inline, management, or other interfaces, or can be separate
					interfaces. Session-reset functionality is not mandatory functionality for the TOE,
					but is a selectable option within the SFR.
					</h:p>
					<h:p>As mentioned in the application note for IPS_NTA_EXT.1.1, it’s not necessary for
					the TOE to have multiple single-purpose interfaces (e.g. “sensor” interface,
					“management” interface, etc.), though it is expected that the TOE be able to
					enable specific ports to serve one or more specific interface functions.
					</h:p>
					</note>
					<aactivity>
						<TSS>
						The evaluator shall verify that the TSS identifies all interface types capable of being deployed in the modes of promiscuous, and or inline mode as well as the interfaces necessary to facilitate each deployment mode
						(at a minimum, the interfaces need to support inline mode). The evaluator shall also check that the TSS
						provides a description for how the management interface is logically distinct from any sensor interfaces.
						</TSS>
						<Guidance>
						The evaluator shall verify that the operational guidance provides instructions on how to deploy each of
						the deployment methods outlined in the TSS. The evaluator shall also verify that the operational guidance
						provides instructions of applying IPS policies to interfaces for each deployment mode. If the management
						interface is configurable, the evaluator shall verify that the operational guidance explains how to
						configure the interface as a management interface.<h:br/>
						The evaluator shall verify that the operational guidance explains how the TOE sends commands to remote
						traffic filtering devices if this functionality is supported.

						</Guidance>
						<Tests>
						Testing for this element is performed in conjunction with testing where promiscuous and inline interfaces are tested. 
						</Tests>
					</aactivity>
				</f-element>
				<audit-event>
				<audit-event-descr>Modification of which IPS policies
				are active on a TOE interface</audit-event-descr>
				<audit-event-info>Identification of the TOE interface.
				</audit-event-info>
				<audit-event-info>The IPS policy and interface mode (if
				applicable).
				</audit-event-info>
				</audit-event>
				<audit-event>
				<audit-event-descr>Enabling/disabling a TOE
				interface with IPS policies
				applied.
				</audit-event-descr>
				<audit-event-info>Identification of the TOE interface.
				</audit-event-info>
				<audit-event-info>The IPS policy and interface mode (if
				applicable).
				</audit-event-info>
				</audit-event>
				<audit-event>
				<audit-event-descr>Modification of which mode(s)
				is/are active on a TOE interface.
				</audit-event-descr>
				<audit-event-info>Identification of the TOE interface.
				</audit-event-info>
				<audit-event-info>The IPS policy and interface mode (if
				applicable).
				</audit-event-info>
				</audit-event>
				</f-component>
				<f-component name="Signature-Based IPS Functionality" cc-id="ips_sdb_ext.1" id="ips-sdb-ext.1-ips">
				<f-element id="ips-sbd-ext-1e1">
				<title>
					The TSF shall support inspection of packet header contents and be able to inspect at least the following header fields: [
					<h:ul>
					<h:li><h:i>IPv4: version; header length; packet length; ID; IP flags; fragment offset;time to live (TTL); protocol; header checksum; source address; destination address; IP options; and<selectables>
						<selectable>type of service (ToS)</selectable>
						<selectable>no other field</selectable></selectables>.</h:i></h:li>
					<h:li><h:i>IPv6: version; payload length; next header; hop limit; source address; destination address; routing header; and </h:i><selectables>
						<selectable>traffic class</selectable>
						<selectable>flow label</selectable>
						<selectable>no other field</selectable>
						</selectables>
					</h:li>
					<h:li><h:i>ICMP: type; code; header checksum; and </h:i><selectables>
						<selectable>ID</selectable>
						<selectable>sequence number</selectable>
						<selectable><assignable>other field in the ICMP header</assignable></selectable>
					</selectables>					
						</h:li>
					<h:li><h:i>ICMPv6: type; code; and header checksum.</h:i></h:li>
					<h:li><h:i>TCP: source port; destination port; sequence number; acknowledgement number; offset; reserved; TCP flags; window; checksum; urgent pointer; and TCP options.</h:i></h:li>
					<h:li><h:i>UDP: source port; destination port; length; and UDP checksum</h:i>].</h:li>
					</h:ul>
				</title>
				<aactivity level="element">      <!-- at minimum, only the last f-element in the f-component needs to have this -->
					<TSS>
					The evaluator shall verify that the TSS describes what is comprised within a signature rule.
					<h:br/>
					The evaluator shall verify that each signature can be associated with a reaction specified in IPS_SBD_EXT.1.5.
					<h:br/>
					The evaluator shall verify that the TSS identifies all interface types that are capable of applying signatures
					and explains how rules are associated with distinct network interfaces. Where interfaces can be grouped
					into a common interface type (e.g., where the same internal logical path is used, perhaps where a
					common device driver is used) they can be treated collectively as a distinct network interface.
					</TSS>
					<Guidance>
					The evaluator shall verify that the operational guidance provides instructions with how to create and/or configure rules using the following protocols and header inspection fields:
					<h:ul>
						<h:li>IPv4: version; header length; packet length; ID; IP flags; fragment offset; time to live (TTL); protocol; header checksum; source address; destination address; and IP options.</h:li>
						<h:li>IPv6: Version; traffic class; flow label; payload length; next header; hop limit; source address; destination address; routing header; home address options</h:li>
						<h:li>ICMP: type; code; header checksum; and rest of header (varies based on the ICMP type and code).</h:li>
						<h:li>ICMPv6: type; code; and header checksum.</h:li>
						<h:li>TCP: Source port; destination port; sequence number; acknowledgement number; offset; reserved; TCP flags; window; checksum; urgent pointer; and TCP options.</h:li>
						<h:li>UDP: source port; destination port; length; and UDP checksum.</h:li>
					</h:ul>
					The evaluator shall verify that the operational guidance provides instructions with how to select and/or configure reactions specified in IPS_SBD_EXT.1.5 in the signature rules.

					</Guidance>
					<Tests>
					The evaluator shall perform the following tests:
					<testlist>
						<test>The evaluator shall use the instructions in the operational guidance to test that packet header
							signatures can be created and/or configured with the selected and/or configured reactions specified in
							IPS_SBD_EXT.1.5 for each of the attributes listed below. Each attribute shall be individually assigned to its
							own unique signature:
							<h:ul>
							<h:li>IPv4: Version; Header Length; Packet Length; ID; IP Flags; Fragment Offset; Time to Live (TTL); Protocol; Header Checksum; Source Address; Destination Address; and IP Options</h:li>
							<h:li>IPv6: Version; traffic class; flow label; payload length; next header; hop limit; source address; destination address; routing header; home address options.</h:li>
							<h:li>ICMP: Type; Code; Header Checksum; and Rest of Header (varies based on the ICMP type and code). </h:li>
							<h:li>ICMPv6: Type; Code; and Header Checksum.</h:li>
							<h:li>TCP: Source port; destination port; sequence number; acknowledgement number; offset; reserved; TCP flags; window; checksum; urgent pointer; and TCP options.</h:li>
							<h:li>UDP: Source port; destination port; length; and UDP checksum.</h:li>
							
							</h:ul>
							The evaluator shall generate traffic to trigger a signature and shall then use a packet sniffer to capture traffic that ensures the reactions of each rule are performed as expected.</test>
							<test>The evaluator shall repeat the test above to ensure that signature-based IPS policies can be defined for each distinct network interface type capable of applying signatures as supported by the TOE.</test>
						</testlist>
					</Tests>
				</aactivity>
				</f-element>
				<f-element id="ips-sbd-ext-1e2">
				<title>
				The TSF shall support inspection of packet payload data and be able to inspect at least the following data elements to perform string-based patternmatching: [
				<h:ul>
					<h:li><h:i>ICMPv4 data: characters beyond the first 4 bytes of the ICMP header.</h:i></h:li>
					<h:li><h:i>ICMPv6 data: characters beyond the first 4 bytes of the ICMP header.</h:i></h:li>
					<h:li><h:i>TCP data (characters beyond the 20 byte TCP header), with support for detection of:
						<h:ol type="i">
							<h:li>FTP (file transfer) commands: help, noop, stat, syst, user, abort, acct, allo, appe, cdup, cwd, dele, list, mkd, mode, nlst, pass, pasv, port, pass, quit, rein, rest, retr, rmd, rnfr, rnto, site, smnt, stor, stou, stru, and type.</h:li>
							<h:li>HTTP (web) commands and content: commands including GET and POST, and administrator- defined strings to match URLs/URIs, and web page content.</h:li>
							<h:li>SMTP (email) states: start state, SMTP commands state, mail header state, mail body state, abort state</h:li>
							<h:li><selectables>
								<selectable><assignable>other types of TCP payload inspection</assignable></selectable>
								<selectable>no other types of TCP payload inspection</selectable>
							</selectables></h:li>
						</h:ol></h:i></h:li>
					<h:li><h:i>UDP data: characters beyond the first 8 bytes of the UDP header;</h:i></h:li>
					<h:li><assignable>other types of packet payload inspection</assignable>].</h:li>				
				</h:ul>
				</title>
				<aactivity level="element">
				<TSS>
					The evaluator shall verify that the TSS describes what is comprised within a string-based detection
					signature.<h:br/>
					The evaluator shall verify that each packet payload string-based detection signature can be associated
					with a reaction specified in IPS_SBD_EXT.1.5.
					</TSS>
					<Guidance>The evaluator shall verify that the operational guidance provides instructions with how to configure rules using the packet payload string-based detection fields defined in IPS_SBD_EXT.1.2.<h:br/>
					The evaluator shall verify that the operational guidance provides instructions with how to configure reactions specified in IPS_SBD_EXT.1.5 for each string-based detection signature.<h:br/>
					The evaluator shall verify that the operational guidance provides instructions with how rules are associated with distinct network interfaces that are capable of being associated with signatures.
					</Guidance>
					<Tests>
					The evaluator shall perform the following tests:<testlist>
					<test>The evaluator shall use the instructions in the operational guidance to test that packet payload
					string-based detection rules can be assigned to the reactions specified in IPS_SBD_EXT.1.5 using the
					attributes specified in IPS_SBD_EXT.1.2. However it is not required (nor is it feasible) to test all possible
					strings of protocol data, the evaluator shall ensure that a selection of strings in the requirement is selected
					to be tested. At a minimum at least one string using each of the following attributes from IPS_SBD_EXT.1.2
					should be tested for each protocol. The evaluator shall generate packets that match the string in the rule
					and observe the corresponding reaction is as configured.
					<h:ul>
					<h:li>Test at least one string of characters for ICMPv4 data: beyond the first 4 bytes of the ICMP header.</h:li>
					<h:li>Test at least one string of characters for ICMPv6 data: beyond the first 4 bytes of the ICMP
					header</h:li>
					<h:li> TCP data (characters beyond the 20 byte TCP header):
						<h:ol type="i">
							<h:li>Test at least one FTP (file transfer) command: help, noop, stat, syst, user, abort, acct, allo,
							appe, cdup, cwd, dele, list, mkd, mode, nlst, pass, pasv, port, pass, quit, rein, rest, retr, rmd,
							rnfr, rnto, site, smnt, stor, stou, stru, and type.</h:li>
							<h:li> HTTP (web) commands and content:
							<h:ol>
								<h:li>Test both GET and POST commands</h:li>
								<h:li>Test at least one administrator-defined strings to match URLs/URIs, and web pagecontent.</h:li>
							</h:ol></h:li>
							<h:li>Test at least one SMTP (email) state: start state, SMTP commands state, mail header state, mail body state, abort state.</h:li>
							<h:li>Test at least one string in any additional attribute type defined within the “other types of
							TCP payload inspection” assignment, if any other types are specified.
							</h:li>
						</h:ol></h:li>
					<h:li>Test at least one string of UDP data: characters beyond the first 8 bytes of the UDP header;</h:li>
					<h:li>Test at least one string for each additional attribute type defined in the “other types of packet
					payload inspection” assignment, if any other types are specified.</h:li>
					</h:ul></test>
					<test>The evaluator shall repeat Test 1 above to ensure that signature-based IPS policies can be defined for each distinct network interface type capable of applying signatures as supported by the TOE.</test>
					</testlist>
					</Tests>    
                 </aactivity>
				</f-element>
				<f-element id="ips-sbd-ext-1e3">
                <title>
				The TSF shall be able to detect the following header-based signatures (using fields identified in IPS_SBD_EXT.1.1) at IPS sensor interfaces: [
				<h:ol type="a">
					<h:li><h:i>IP Attacks
						<h:ol type="i">
							<h:li>IP Fragments Overlap (Teardrop attack, Bonk attack, or Boink attack)</h:li>
							<h:li>IP source address equal to the IP destination (Land attack)</h:li>
						</h:ol>
					</h:i></h:li>
					<h:li><h:i>ICMP Attacks
						<h:ol type="i">
							<h:li>Fragmented ICMP Traffic (e.g. Nuke attack)</h:li>
							<h:li>Large ICMP Traffic (Ping of Death attack)</h:li>
						</h:ol>
					</h:i></h:li>
					<h:li><h:i>TCP Attacks
						<h:ol type="i">
							<h:li>TCP NULL flags</h:li>
							<h:li>TCP SYN+FIN flags</h:li>
							<h:li>TCP FIN only flags</h:li>
							<h:li>TCP SYN+RST flags</h:li>
						</h:ol>
					</h:i></h:li>
					<h:li><h:i>UDP Attacks</h:i>
						<h:ol type="i">
							<h:li><h:i>UDP Bomb Attack</h:i></h:li>
							<h:li><h:i>UDP Chargen DDoS Attack</h:i>].</h:li>
						</h:ol>
					</h:li>
				</h:ol>
                </title>
                <aactivity level="element">
					<TSS>The evaluator shall verify that the TSS describes how the attacks defined in IPS_SBD_EXT.1.3 are processed by the TOE and what reaction is triggered when these attacks are identified.</TSS>
					<Guidance>The evaluator shall verify that the operational guidance provides instructions with configuring rules to identify the attacks defined in IPS_SBD_EXT.1.3 as well as the reactions to these attacks as specified in IPS_SBD_EXT.1.5.</Guidance>
					<Tests>The evaluator shall create and/or configure rules for each attack signature in IPS_SBD_EXT.1.3. For each
					attack, the TOE should apply its corresponding signature and enable it to each distinct network interface
					type capable of applying the signatures. The evaluator shall use packet captures to ensure that the attack
					traffic is detected by the TOE and a reaction specified in IPS_SBD_EXT.1.5 is triggered and stops the attack.
					Each attack should be performed one after another so as to ensure that its corresponding signature
					successfully identified and appropriately reacted to a particular attack.
					</Tests>
                 </aactivity>
                </f-element>
				<f-element id="ips-sbd-ext-1e4">
                <title>The TSF shall be able to detect all the following traffic-pattern detection signatures, and to have these signatures applied to IPS sensor interfaces: [
					<h:ol type="a">
						<h:li><h:i>Flooding a host (DoS attack)
							<h:ol type="i">
								<h:li>ICMP flooding (Smurf attack, and ping flood)</h:li>
								<h:li>TCP flooding (e.g. SYN flood)</h:li>
							</h:ol></h:i></h:li>
						<h:li><h:i>Flooding a network (DoS attack)</h:i></h:li>
						<h:li><h:i>Protocol and port scanning</h:i>
							<h:ol type="i">
								<h:li><h:i>IP protocol scanning</h:i></h:li>
								<h:li><h:i>TCP port scanning</h:i></h:li>
								<h:li><h:i>UDP port scanning</h:i></h:li>
								<h:li><h:i>ICMP scanning</h:i>].</h:li>
							</h:ol></h:li>
					</h:ol>
                </title>
				<note role="application">
				<h:p>This SFR defines the minimum set of packet header fields, packet payload strings,
					signature types, and potentially malicious traffic patterns (e.g. flooding and
					scanning) that the TOE must be able to detect. Valid signatures can be comprised
					of one, some, or all attributes listed in this SFR, and IPS TOEs may support
					inspection of additional attributes not listed in this SFR, but only those listed in
					the SFR will be tested by the evaluators. The set of signature types, traffic
					patterns, etc. identified in this SFR are not intended to be an exhaustive or
					completely representative list of malicious activity, nor is it meant to address
					DDoS attacks – the intent of this SFR is addressing attacks form a single source
					IP.</h:p><h:p>
					Protocol and port scanning refers to reconnaissance attacks that scan target IP
					addresses for open/listening/responsive services by targeting multiple
					protocols/ports on one or more target IP address using obvious (sequentially
					numbered) patterns of target protocol/port numbers or by randomizing the
					protocol/port numbers and/or randomizing the time delays between
					transmissions.
					</h:p><h:p>
					It is understood and expected that IPS product vendors will support pre-defined
					signatures, but inspection of the efficacy of the pre-defined signatures
					themselves is not objective of this PP-Module. Instead, this PP-Module focuses
					on the ability of the TOE to perform detailed analysis of network traffic, and
					those pre-defined signatures may be used during evaluation, the evaluation
					team is expected to make use of custom-made signatures as well. This set of
					signature types, traffic patterns, etc. has been selected to: 1) place reasonable
					boundaries around the scope of testing; and 2) provide a sufficient sampling of
					packet contents, and traffic patterns to demonstrate the TOE’s ability to inspect
					packet contents, to collect traffic pattern statistics over a period of time, and to
					correlate collected data.
					</h:p><h:p>An IPS sensor interface refers to any TOE interface to which an IPS policy is currently applied.</h:p>
				</note>
                <aactivity level="element">
					<TSS>The evaluator shall verify that the TSS describes how the attacks defined in IPS_SBD_EXT.1.4 are processed by the TOE and what reaction is triggered when these attacks are identified.

					</TSS>
					<Guidance>
					The evaluator shall verify that the operational guidance provides instructions with configuring rules to identify the attacks defined in IPS_SBD_EXT.1.4 as well as the reactions to these attacks as specified in IPS_SBD_EXT.1.5.
					</Guidance>
					<Tests>The evaluator shall configure individual signatures for each attack in IPS_SBD_EXT.1.4. For each attack,
					the TOE should apply its corresponding signature and enable it to each distinct network interface type
					capable of applying signatures. The evaluator shall use packet captures to ensure that the attack traffic is
					detected by the TOE and a reaction specified in IPS_SBD_EXT.1.5 is triggered and stops the attack. Each
					attack should be performed one after another so as to ensure that its corresponding signature successfully
					identified and appropriately reacted to a particular attack.
					</Tests>
                </aactivity>
                </f-element>
				<f-element id="ips-sbd-ext-1e5">
                <title>
				The TSF shall allow the following operations to be associated with signaturebased IPS policies:
				<h:ul>
					<h:li>In any mode, for any sensor interface:<selectables linebreak="yes">
						<selectable>allow the traffic flow;</selectable>
						<selectable>send a TCP reset to the source address of the offending traffic;</selectable>
						<selectable>send a TCP reset to the destination address of the offending traffic;</selectable>
						<selectable>send an ICMP<selectables>
							<selectable>host</selectable>
							<selectable>destination</selectable>
							<selectable>port</selectable></selectables>unreachable message;</selectable>
						<selectable>trigger a non-TOE network device to block the offending traffic pattern</selectable>
						</selectables></h:li>
					<h:li>In inline mode:
						<h:ul>
							<h:li>block/drop the traffic flow;</h:li>
							<h:li>and<selectables linebreak="yes">
								<selectable>allow all traffic flow;</selectable>
								<selectable>allow the traffic flow with following exceptions:<assignable>malicious traffic such as but not limited to IPS_EXT.1.3 and IPS_EXT.1.4 if always dropped</assignable>;</selectable> <selectable>modify and forward packets before they pass through the TOE</selectable></selectables>.</h:li>
						</h:ul>
					</h:li>
				</h:ul>
                </title>
				<note role="application">The term “trigger” is used to allow for multiple types of interactions, including:
				one in which the TOE initiates a authenticated connection to the remote device
				across an IP network and uses a remote administration interface of the remote
				device to modify the active configuration on that device; or one in which the
				connection between the TOE and the non-TOE network device does not traverse
				an IP network. If the ST author selects “trigger a non-TOE network device…” and
				the connection between the TOE and the non-TOE network device traverses an
				IP network, the ST author must ensure that the non- TOE device type is identified
				within FTP_ITC.1.3 (of the base), and the connection between the TOE and the
				remote device must be secured in accordance with FTP_ITC.1. In the last bullet
				of the SFR, “modify and forward packets before they pass through the TOE,”
				could include such actions as removing from packet data character strings that
				match regular expression (regex) conditions that violate policies, such as
				transmitting personally identifiable information or other private data (phone
				numbers, credit-card numbers, etc.).</note>

                <aactivity level="element">
				<TSS>There are no TSS EAs for this element</TSS>
				<Guidance>The guidance EAs for this element are performed in conjunction with IPS_SBD_EXT.1.1, IPS_SBD_EXT.1.3, and IPS_SBD_EXT.1.4.</Guidance>
				<Tests>The test EAs for this element are performed in conjunction with those for IPS_SBD_EXT.1.1, IPS_SBD_EXT.1.2, IPS_SBD_EXT.1.3, and IPS_SBD_EXT.1.4.</Tests>
                 </aactivity>
                </f-element>
				<f-element id="ips-sbd-ext-1e6">
                <title>
				The TSF shall support stream reassembly or equivalent to detect malicious payload even if it is split across multiple non-fragmented packets.

                </title>
                <aactivity level="element">
					<TSS>There are no TSS EAs for this element.</TSS>
					<Guidance>The evaluator shall verify that the operational guidance provides configuration instructions, if needed, to detect payload across multiple packets.</Guidance>
					<Tests>The evaluator shall repeat one of the tests in IPS_SBD_EXT.1.2 Test 1 but generate multiple nonfragmented packets that contain the string in the rule defined. The evaluator shall verify that the malicious traffic is still detected when split across multiple non-fragmented packets.</Tests>
                 </aactivity>
                </f-element>
				<audit-event>
				<audit-event-descr>Inspected traffic matches a signature-based IPS rule with logging enabled.</audit-event-descr>
				<audit-event-info>Name or identifier of the matched signature.</audit-event-info>
				<audit-event-info>Source and destination IP addresses.</audit-event-info>
				<audit-event-info>The content of the header fields that weredetermined to match the signature.</audit-event-info>
				<audit-event-info>TOE interface that received the packet.</audit-event-info>
				<audit-event-info>Network-based action by the TOE (e.g. allowed, blocked, sent reset).</audit-event-info>
				
				</audit-event>
				</f-component>
			</section>


	
	</man-sfrs>  <!-- SFRs -->
    
    <opt-sfrs>
	<section title="Security Audit(FAU)" id="fau">
	<comment>^this is something that I added, the original IPS pp did not have this entry</comment>
			<f-component name="Protected Audit Trail Storage" cc-id="fau_stg.1/ips" id="fau-stg.1-ips">
			<f-element id="fau-stg-1e1-ips">
				<title>The TSF shall protect the stored <h:s>audit records </h:s><h:b>IPS data</h:b> from unauthorized deletion.</title>
				<aactivity>
				<no-tests/>
				</aactivity>
			</f-element>
			<f-element id="fau-stg-1e2">
				<title>The TSF shall be able to [<h:i>prevent</h:i>] unauthorized modifications to the <h:s>stored audit records</h:s> <h:b>IPS data</h:b> <h:s>in the audit trail</h:s>.</title>
				<aactivity>
				<TSS>The evaluator shall ensure that the TSS identifies how IPS data is protected from unauthorized modification and deletion.</TSS>
				<Guidance>The evaluator shall confirm the guidance documentation describes how to protect IPS data from unauthorized modification and deletion.</Guidance>
				<Tests>The evaluator shall devise tests that demonstrate that IPS data can be protected from unauthorized modification and deletion.</Tests>
			</aactivity>
			</f-element>
			
			</f-component>
			<f-component name="Prevention of Audit Data Loss" cc-id="fau_stg.4/ips" id="fau-stg.4-ips">
			<f-element id="fau-stg-4e1">
			<title>
			The TSF shall <h:b>be able to</h:b>
				<selectables>
					<selectable>ignore <h:s>audited</h:s> <h:b>generation of IPS</h:b> events <h:b>that would otherwise be generated</h:b></selectable>
					<selectable>prevent audited <h:b>IPS</h:b> events</selectable>
					<selectable><h:s>except those taken by the authorized user with special rights</h:s></selectable>
					<selectable>overwrite the oldest stored <h:s>audit records</h:s> IPS data</selectable>
				</selectables>, and [<h:i>no other actions</h:i>] if the <h:s>audit</h:s> <h:b>IPS data</h:b> trail is full.
			
			</title>
			<aactivity>
				<TSS>The evaluator shall ensure that the TSS identifies how IPS data logging is handled once the IPS data trail is full.</TSS>
				<Guidance>The evaluator shall confirm the guidance documentation describes any steps involved to manage IPS data logging when the IPS audit trail is full.</Guidance>
				<Tests>There are no test EAs for this component.</Tests>
				</aactivity>
			</f-element>
			<audit-event>
			<audit-event-descr>A local audit store reaches its storage limit.</audit-event-descr>
			<audit-event-info>Indication that the audit store is full, and (if configurable) how the TOE is responding (e.g. failing to audit new auditable events, or </audit-event-info></audit-event>
			</f-component>
	</section>
	<section title="Protection of the TSF (FPT)" id="fpt">
	<f-component name="Failure with Preservation of Secure State" cc-id="fpt_fls.1" id="fpt-fls.1">
	<f-element id="fpt-fls-1">
	<title>The TSF shall <h:br>be able to</h:br> preserve a secure state <h:br>for inline interfaces</h:br> when the following types of failures occur: <assignable>list of types of failures in the TSF</assignable></title>
	<note role="application">
	The intent of this SFR is to allow the ST author to define the types of failures
	that can occur on the TOE which could result in failure to effectively detect and
	react to IPS policy violations for traffic traversing inline interface, and to not
	allow traffic to traverse those interfaces. The first refinement “to be able” is
	included to allow the TOE administrator to configure the TOE to allow traffic to
	traverse inline interfaces when the TOE is in a partially of fully failed state, but
	to provide assurance that the TOE is capable of blocking traffic if it has been
	configured to do so. The purpose of this SFR, as stated in CC Part 2, is to “ensure
	that the TOE will always enforce its SFRs in the event of identified categories of
	failures in the TSF.” Since some of the SFRs require inspection of data, and that inspection cannot occur when a network interface fails, it will not always be
	true that “all” the SFRs will continue to be enforced in the event of failure of
	certain components. The intent here is to ensure that if network traffic is not
	capable of being inspected by the TSF, then it should automatically be treated
	as untrusted.
	</note>
	<aactivity><TSS>The evaluator shall examine the TSS section to determine that the TOE’s implementation of the fail secure
	functionality is documented. The evaluator shall ensure that the TSS identifies all failures that will result
	in the TOE preserving a secure state if triggered. The evaluator shall then ensure that the TOE will attain
	a secure state after inserting each specified failure mode type. The evaluator shall also examine the TSS
	to determine whether the fail-secure functionality is configurable.</TSS>
	<Guidance>There are no operational guidance EAs for this component.</Guidance>
	<Tests>For each type of failure listed in the assignment, the TOE vendor must provide the evaluator with the
	means to trigger the failure, and the evaluator shall reproduce each type of failure to ensure that an applied IPS policy remains enforced during the failure. For example, various causes including temporary
	loss of power could result in a reboot of the TOE. If the active IPS policy at the time of the failure (e.g.
	reboot) ensured that ICMP echo packets were dropped by the TOE, the evaluator shall confirm that at no
	point during the shutdown or restart of the TOE is any ICMP echo packet allowed through the TOE (though
	in this example, it should be understood that there will be a period at which IPS events are not audited
	while the audit mechanism is pending restart).
	</Tests></aactivity>
	</f-element>
	<audit-event>
	<audit-event-descr>A local audit store reaches its storage limit.</audit-event-descr>
	<audit-event-info>Indication that the audit store is full, and (if configurable) how the TOE is responding (e.g. failing to audit new auditable events, or </audit-event-info></audit-event>
	</f-component>
	</section>
	<section title="Intrusion Prevention (IPS)" id="ips">
	<f-component name="Traffic Normalization" cc-id="ips_sbd_ext.2" id="ips-sbd.2">
	<f-element id="ips-sbd-2e1">
	<title>The TSF shall be able to inspect packets encapsulated through the following means: <selectables><selectable>GRE</selectable><selectable>IP-in-IP</selectable><selectable>IPv4-in-IPv6</selectable><selectable>MPLS</selectable><selectable> PPTP</selectable><selectable><assignable>other
encapsulation methods</assignable></selectable></selectables>.
	</title>
	<aactivity>
		<TSS>The evaluator shall verify that the TSS describes how the TOE is able to inspect traffic inside the encapsulation protocols claimed in the requirement.</TSS>
		<Guidance>The evaluator shall examine the operational guidance to determine that it contains instructions for inspecting tunneled packets through the encapsulation methods identified in the requirement.</Guidance>
		<Tests>The evaluator shall set up the conditions necessary to execute testing from IPS_SBD_EXT.1 except that
		the traffic to be inspected is encapsulated in one of the tunneling protocols that the TOE is capable of
		inspecting. The evaluator shall transmit the encapsulated traffic and observe that the TSF is able to inspect
		it and respond in the configured manner. The evaluator shall repeat this test for each type of encapsulated
		traffic supported by the TSF.</Tests>
	</aactivity>

	</f-element>
	<audit-event>
	<audit-event-descr>Inspection of encapsulated packets.</audit-event-descr>
	<audit-event-info>Indication of the encapsulation method.</audit-event-info>
	</audit-event>
	<f-element id="ips-sbd-ext-2e2">
	<title>The TSF shall be able to perform IP normalization to reassemble fragmented packets for inspection, and: <selectables linebreak="yes">
	<selectable>For data collected at promiscuous interfaces: generate an alert if the packet cannot be reassembled;</selectable>
	<selectable>For data collected at inline interfaces: do not forward any packet fragments and generate an alert if the TSF cannot reassemble the entire packet</selectable>


	</selectables>.</title>
	<aactivity>
		<TSS>The evaluator shall verify that the TSS describes how audit records are generated when packets cannot
		be reassembled after fragmentation. Also, for inline mode, the evaluator shall examine the TSS to ensure
		packets are dropped.</TSS>
		<Guidance>There are no guidance EAs for this element.</Guidance>
		<Tests>The evaluator shall perform the following tests:<testlist>
		<test>The evaluator shall generate packets that cannot be reassembled after fragmentation; the evaluator shall ensure audit events are generated for all instances of IP normalization.</test>
		<test>For inline mode: The evaluator shall test for automatic packet rejection for when packets cannot be reassembled after fragmentation. The evaluator shall use packet captures to ensure that the IP traffic is detected by the TOE and packets are dropped.</test>
		<test>The evaluator shall generate packets that can be reassembled after fragmentation; the evaluator shall ensure audit events are generated for all instances of IP normalization.</test>
		</testlist></Tests>
		</aactivity>
		
	</f-element>
	<audit-event>
		<audit-event-descr>Failure to re-assemble a fragmented packet.</audit-event-descr>
		<audit-event-info>Source and destination IP addresses.</audit-event-info>
		<audit-event-info>TOE interface that received the fragment(s).</audit-event-info>
		</audit-event>
	<f-element id="ips-sbd-ext-2e3">
	<title>The TSF shall be able to perform TCP normalization for traffic flows through the TOE when the TOE is deployed in inline mode, and prohibit forwarding of: <selectables linebreak="yes">
		<selectable>duplicate packets;</selectable>
		<selectable>changed packets;</selectable>
		<selectable>out-of-sequence packets;</selectable>
		<selectable>
			<selectables><selectable><assignable>other packet types that should not be
forwarded</assignable></selectable>
			<selectable>no other packets</selectable>
			</selectables>
			</selectable></selectables></title>
	<aactivity>
	<TSS>The evaluator shall verify that the TSS describes that packets are automatically dropped for the following normalization:<h:ul>
	<h:li>duplicate packets</h:li>
	<h:li>changed packets</h:li>
	<h:li>out of sequence packets</h:li>
	<h:li>other packet types claimed in the requirement, if any</h:li>
	</h:ul></TSS>
	<Guidance>There are no guidance EAs for this element.</Guidance>
	<Tests>The evaluator shall generate the following types of packets and observe that they are discarded by the TSF: <h:ul><h:li>duplicate packets</h:li>
		<h:li>duplicate packets</h:li>
		<h:li>changed packets</h:li>
		<h:li>out of sequence packets</h:li>
		<h:li>other packet types claimed in the requirement, if any</h:li>
		</h:ul>
</Tests>
		</aactivity>
		
	</f-element>
	<audit-event>
		<audit-event-descr>Normalization of traffic by the TOE.</audit-event-descr>
		<audit-event-info>Source and destination IP addresses of discarded packet(s).</audit-event-info>
		<audit-event-info>TOE interface that received the packet(s)</audit-event-info>
		</audit-event>
	</f-component>
	</section>
	</opt-sfrs>		
    <sel-sfrs/>
    <obj-sfrs/>
    <impl-dep-sfrs/>
	


    </sec:Security_Requirements> <!-- Security Requirements  -->

<?modules <!-- Security Reuirements Section for Modules -->
	<section title="Security Requirements" id="sec-reqs">

		<!-- Requirements for Each Base PP -->
		<base-pp id="bpp-mdf"                                            <!-- unique ID within this document -->
             name="Protection Profile for Mobile Device Fundamentals"    <!-- Full name of Base PP  -->
             short="mdf"                                                 <!-- short name of Base PP  -->
             product="Mobile Device"                                     <!-- Base PP Product -->
             version="3.3">                                              <!-- Base PP version  -->

			<!-- Reference to Github repo of Base PP. -->
			<!-- If there is none, then this is omitted -->
			<git>
				<url>https://github.com/commoncriteria/mobile-device</url>       <!-- URL of base PP github repo --> 
				<branch>release-3.3</branch>                                     <!-- Github branch of release version  -->
			</git>

			<!-- URL of Base PP on the NIAP website  -->
			<url>https://www.niap-ccevs.org/Profile/Info.cfm?PPID=417&amp;id=417</url>

			<!-- Security Functional Requirements Direction -->
			<sec-func-req-dir>
				In a PP-Configuration that includes the MDF PP, the VPN client is expected to rely on some of the
				security functions implemented by the OS as a whole and evaluated against the Base-PP.
				In this case, the following sections describe any modifications that the ST author must make to the SFRs
				defined in the Base-PP in addition to what is mandated by section 5.5.
			</sec-func-req-dir>

			<!-- Requirements in the base PP that are modified by the Module -->
			<modified-sfrs>
				<section title="Identification and Authentication (FIA)" id="md-m-fia">    
					<!-- Modified SFRs from the FIA Family  -->
				</section>
				<section title="Security Management (FMT)" id="md-m-fmt">    
					<!-- Modified SFRs from the FMT Family   -->
				</section>
				<!-- etc. -->
			</modified-sfrs>
			
			<!-- SFRs that the Module adds to the base PP -->
			<additional-sfrs>
				<!-- Audit table for Additional SFRs -->
				<section id="sec-at-os-addnl" title="Auditable Events for GPOS Additional SFRs">
					<audit-table id="at-os-addnl" table="tab-at-os-addnl" title="Auditable Events for GPOS Additional SFRs"/>
				</section>	

				<section title="Cryptographic Support (FCS)" id="os-a-fcs">
					<ext-comp-def title="Cryptographic Key Management" fam-id="FCS_CKM_EXT">
					<fam-behavior>Components in this family describe requirements for key management functionality such as key
						storage and destruction.</fam-behavior>
					</ext-comp-def>
					<!-- Additional SFRs from the FCS Family (apparently at least one is EXT) -->
				</section>

				<section title="Security Management (FMT)" id="os-m-fmt">    
					<!-- Additional SFRs from the FMT Family  -->
				</section>
            	<!-- etc. -->
			</additional-sfrs>
			
			<!-- Consistency Rationale information for the base PP -->
			<!-- Consistency of TOE type -->
			<con-toe>
				If this PP-Module is used to extend the MDF PP, the TOE type for the overall TOE is still a mobile device.
				The TOE boundary is simply extended to include VPN client functionality that is built in to the device’s
				software so that additional security functionality is claimed within the scope of the TOE.  
			</con-toe>
			
			<!-- Consistency of Security Problem Definition -->
			<con-sec-prob>
				The threats and assumptions defined by this PP-Module (see sections 3.1 and 3.2) supplement
				those defined in the MDF PP as follows: 
			</con-sec-prob>
			
			<!-- Consistency of Objectives -->
			<!-- Introductory text for the consistency of objective table. -->
			<!-- This may be omitted for direct rational modules. If included it is ignored. -->
			<con-obj>
				The security objectives defined by this PP-Module (see sections 4.1 and 4.2) supplement 
				those defined in the MDF PP as follows:
			</con-obj>
			
			<!-- Consistency of Operational Environment Objectives -->
			<!-- This tag provides introductory text for the Consistency of OE objectives table. -->
			<!-- It can be left empty. -->
			<con-op-en></con-op-en>
			
			<!-- Consistency of Security Problem Description -->
			<!-- Rationales for threats and assumptions -->
			<con-mod ref="T.UNAUTHORIZED_ACCESS">The threat of an attacker gaining access to a network interface or data
				that is transmitted over it is consistent with the T.NETWORK and T.EAVESDROP threats in the MDF PP.
			</con-mod>
			<con-mod ref="A.TRUSTED_CONFIG">This assumption is consistent with the MDF PP because the MDF PP
				includes the A.CONFIG assumption which assumes that all security functions are appropriately configured.
			</con-mod>
			
			<!-- Consistency of Objectives -->
			<!-- In Direct Rationale modules, the Objective rationale are omitted -->
			<con-mod ref="O.KNOWN_STATE">This objective is consistent with the O.INTEGRITY objective of the
				MDF PP, which expects a conformant TOE to implement measures to maintain its own integrity.
			</con-mod>
			<con-mod ref="OE.NO_TOE_BYPASS">This objective addresses behavior that is out of scope of the MDF PP
				and does not define an environment that an MDF TOE is incapable of existing in.
			</con-mod>
			
			<!-- Consistency of Requirements -->
			<con-mod ref="md-fcs-ckm-1">The ST author is instructed to make specific selections at minimum to
				address VPN client requirements; the SFR behavior itself is unmodified.
			</con-mod>
			<con-mod ref="fcs-ipsec-ext-1">This SFR defines the VPN client’s IPsec implementation, which is added
				functionality that does not interfere with the MDF functions.
			</con-mod>
			<con-mod ref="fdp-rip-2">The requirement to protect against re-use of residual data is a property of
				the VPN client behavior and does not impact the MDF functionality.
			</con-mod>
			
		</base-pp>  
		
		<!-- etc. for all the base PPs -->
		
		<!-- After all the Base PP requirements come the Moduyle's own Requirements -->
		<!-- TOE Security Functional Requirements -->
		<!-- The order is weird. -->
		
		<!-- Mandatory SFRs -->
		<man-sfrs>
		
			<!-- Audit table for mandatory SFRs -->
			<section id="ss-audit-table" title="Auditable Events for Mandatory SFRs">
				<audit-table id="at-mandatory" table="mandatory">
					<h:br/><h:b><ctr ctr-type="Table" pre="Table " id="atref-mandatory">: Auditable Events for Mandatory SFRs</ctr></h:b>
				</audit-table>
			</section>

			<!-- Mandatory SFRs. Classes and ECD information is required. -->
		
		</man-sfrs>

		<!-- SARs added by the Module. This is rare. -->
		<mod-sars>
			<!-- SARS added by the module. If none, this tag may be omitted. --> 
		</mod-sars>
		
		<!-- Optional SFRs -->
		<opt-sfrs>
			
			<!-- Audit table for optional SFRs -->
		    <section id="sop-audit-table" title="Auditable Events for Strictly Optional SFRs">
				<audit-table id="at-optional" table="optional">
					<h:br/><h:b><ctr ctr-type="Table" pre="Table " id="atref-optional">: Auditable Events for Strictly Optional SFRs</ctr></h:b>
				</audit-table>
			</section>
			
			<!-- Optional SFRs. Classes and ECD information is required. -->
		
		</opt-sfrs>
		

		<!-- Selection-based SFRs -->
		<sel-sfrs>
			<section id="sb-audit-table" title="Auditable Events for Selection-based SFRs">
				<audit-table id="at-selbased" table="sel-based">
					<h:br/><h:b><ctr ctr-type="Table" pre="Table " id="atref-sel-based">: Auditable Events for Selection-based SFRs</ctr></h:b>
				</audit-table>
			</section>

			<!-- Selection-based SFRs. Classes and ECD information is required. -->
		
		</sel-sfrs>

		<!-- Objective SFRs. This tag may be omitted if there are none. -->
		<obj-sfrs>
		
			<!-- Audit table for objective SFRs -->
		    <section id="sobj-audit-table" title="Auditable Events for Objective SFRs">
				<audit-table id="at-objective" table="objective">
					<h:br/><h:b><ctr ctr-type="Table" pre="Table " id="atref-objective">: Auditable Events for Objective SFRs</ctr></h:b>
				</audit-table>
			</section>
			
			<!-- Objective SFRs. Classes and ECD information is required. -->
		</obj-sfrs>

		
		<!-- Implementation-dependent SFRs -->
		<impl-dep-sfrs>
			
			<section id="sib-audit-table" title="Auditable Events for Implementation-Dependent SFRs">
				<audit-table id="at-feat-based" table="feat-based">
					<h:br/><h:b><ctr ctr-type="Table" pre="Table " id="atref-implbased">: Auditable Events for Implementation-Dependent SFRs</ctr></h:b>
				</audit-table>
			</section>
		
			<!-- implementation-dependent SFRs, etc. -->
		
		</impl-dep-sfrs>
		
	</section>   <!-- Security Requirements -->
?>





  <!-- 
		The following sections are auto generated from the SFRs in the SFR section.
		Appendix A: Optional Requirements 
			A.1: Strictly Optional Requirements
			A.2: Objective requirements
			A.3: Implementation-dependent SFRs
		Appendix B: Selection-based requirements
		Appendix C: Extended Component Definitions (if any)
  -->


	<!-- This should be included if there are SFRs that are dependencies for included SFRs, 
	     but the dependencies are not incluuded in the PP. -->
	<appendix title="Inherently Satisfied Requirements" id="satisfiedreqs"> 
		This appendix lists requirements that should be considered satisfied by products
		successfully evaluated against this Protection Profile.  
		However, these requirements are not featured explicitly as SFRs and should not be
		included in the ST.  
		They are not included as standalone SFRs because it would
		increase the time, cost, and complexity of evaluation.  This approach is permitted
		by <xref g="CC"/> Part 1, <h:b>8.2 Dependencies between components</h:b>.
		<h:br/>
		This information benefits systems engineering activities which call for inclusion of 
		particular security controls.  Evaluation against the Protection Profile
		provides evidence that these controls are present and have been evaluated.
		<table xmlns="http://www.w3.org/1999/xhtml">
			<tr class="header">
				<td>Requirement</td>
				<td>Rationale for Satisfaction</td>
			</tr>
			<tr>
				<td>FIA_UAU.1 - Timing of authentication</td>
				<td>
				  FIA_AFL.1 implicitly requires that the OS perform all necessary actions, 
				  including those on behalf of the user who has not been authenticated, 
				  in order to authenticate;
				  therefore it is duplicative to include these actions as a 
				  separate assignment and test.
				</td>
			</tr>
			<tr>
				<td>FIA_UID.1 - Timing of identification</td>
				<td>
				  FIA_AFL.1 implicitly requires that the OS perform all necessary actions, 
				  including those on behalf of the user who has not been identified, 
				  in order to authenticate;
				  therefore it is duplicative to include these actions as a 
				  separate assignment and test.
				</td>
			</tr>
			<tr>
				<td>FMT_SMR.1 - Security roles</td>
				<td>
				  FMT_MOF_EXT.1 specifies role-based management functions that implicitly defines
				  user and privileged accounts; 
				  therefore, it is duplicative to include separate role requirements.
				</td>
			</tr>
			<tr>
				<td>FPT_STM.1 - Reliable time stamps</td>
				<td>
				  FAU_GEN.1.2 explicitly requires that the OS associate timestamps with audit records;
				  therefore it is duplicative to include a separate timestamp requirement.
				</td>
			</tr>
			<tr>
				<td>FTA_SSL.1 - TSF-initiated session locking</td>
				<td>
					  FMT_MOF_EXT.1 defines requirements for managing session locking;
					  therefore, it is duplicative to include a separate session locking requirement.
				</td>
			</tr>
			<tr>
				<td>FTA_SSL.2 - User-initiated locking</td>
				<td>
				  FMT_MOF_EXT.1 defines requirements for user-initiated session locking;
				  therefore, it is duplicative to include a separate session locking requirement.
				</td>
			</tr>
			<tr>
				<td>FAU_STG.1 - Protected audit trail storage</td>
				<td>
				  FPT_ACF_EXT.1 defines a requirement to protect audit logs;
				  therefore, it is duplicative to include a separate protection of audit trail requirements.
				</td>
			</tr>
			<tr>
				<td>FAU_GEN.2 - User identity association</td>
				<td>
				  FAU_GEN.1.2 explicitly requires that the OS record
				  any user account associated with each event; therefore, it is duplicative
				  to include a separate requirement to associate a user account with each
				  event.
				</td>
			</tr>
			<tr>
				<td>FAU_SAR.1 - Audit review</td>
				<td>
					FPT_ACF_EXT.1.2 requires that audit logs (and other objects)
					are protected from reading by unprivileged users; therefore, it is duplicative
					to include a separate requirement to protect only the audit information.
				</td>
			</tr>
		</table>

	</appendix>

	<!-- Entropy documentation -->
	<appendix title="Entropy Documentation and Assessment" id="entropyappendix"> 
		<h:p>
			This appendix describes the required supplementary information for the entropy
		  source used by the TOE.
			</h:p><h:p>
		  The documentation of the entropy source should be detailed enough that, after
		  reading, the evaluator will thoroughly understand the entropy source and why
		  it can be relied upon to provide sufficient entropy. This documentation should
		  include multiple detailed sections: design description, entropy justification,
		  operating conditions, and health testing. This documentation is not required to
		  be part of the TSS. 
		</h:p>
		<section id="entropydesign" title="Design Description">
			<h:p>
		  Documentation shall include the design of the entropy source as a whole,
		  including the interaction of all entropy source components. Any information
		  that can be shared regarding the design should also be included for any
		  third-party entropy sources that are included in the product. 
			</h:p><h:p>
		  The documentation will describe the operation of the entropy source to
		  include, how entropy is produced, and how unprocessed (raw) data can be
		  obtained from within the entropy source for testing purposes. The documentation
		  should walk through the entropy source design indicating where the entropy
		  comes from, where the entropy output is passed next, any post-processing
		  of the raw outputs (hash, XOR, etc.), if/where it is stored, and finally,
		  how it is output from the entropy source. Any conditions placed on the
		  process (e.g., blocking) should also be described in the entropy source
		  design. Diagrams and examples are encouraged. 
			</h:p><h:p>
		  This design must also include a description of the content of the
		  security boundary of the entropy source and a description of how
		  the security boundary ensures that an adversary outside the boundary
		  cannot affect the entropy rate.
			</h:p><h:p>
		  If implemented, the design description shall include a description
		  of how third-party applications can add entropy to the RBG. A
		  description of any RBG state saving between power-off and
		  power-on shall be included.
			</h:p>
		</section>

		<section id="entropyjustification" title="Entropy Justification">
			<h:p>
		  There should be a technical argument for where the unpredictability in
		  the source comes from and why there is confidence in the entropy source
		  delivering sufficient entropy for the uses made of the RBG output
		  (by this particular TOE). This argument will include a description of
		  the expected min-entropy rate (i.e. the minimum entropy (in bits) per
		  bit or byte of source data) and explain that sufficient entropy is
		  going into the TOE randomizer seeding process. This discussion will
		  be part of a justification for why the entropy source can be relied
		  upon to produce bits with entropy.
			</h:p><h:p>
		  The amount of information necessary to justify the expected
		  min-entropy rate depends on the type of entropy source included in the
		  product.
			</h:p><h:p>
		  For developer provided entropy sources, in order to justify the
		  min-entropy rate, it is expected that a large number of raw source
		  bits will be collected, statistical tests will be performed, and the
		  min-entropy rate determined from the statistical tests. While no
		  particular statistical tests are required at this time, it is expected
		  that some testing is necessary in order to determine the amount of
		  min-entropy in each output.
			</h:p><h:p>
		  For third party provided entropy sources, in which the TOE vendor
		  has limited access to the design and raw entropy data of the source, the
		  documentation will indicate an estimate of the amount of min-entropy
		  obtained from this third-party source.  It is acceptable for the vendor
		  to “assume” an amount of min-entropy, however, this assumption must be
		  clearly stated in the documentation provided.  In particular, the
		  min-entropy estimate must be specified and the assumption included
		  in the ST.
			</h:p><h:p>
		  Regardless of type of entropy source, the justification will also
		  include how the DRBG is initialized with the entropy stated in the ST,
		  for example by verifying that the min-entropy rate is multiplied by the
		  amount of source data used to seed the DRBG or that the rate of entropy
		  expected based on the amount of source data is explicitly stated and
		  compared to the statistical rate. If the amount of source data used to
		  seed the DRBG is not clear or the calculated rate is not explicitly
		  related to the seed, the documentation will not be considered complete.
			</h:p><h:p>
		  The entropy justification shall not include any data added from
		  any third-party application or from any state saving between restarts.
			</h:p>
		</section>

		<section id="entropyoperatingconditions" title="Operating Conditions">
		  The entropy rate may be affected by conditions outside the control
		  of the entropy source itself.  For example, voltage, frequency,
		  temperature, and elapsed time after power-on are just a few of the
		  factors that may affect the operation of the entropy source.
		  As such, documentation will also include the range of operating conditions
		  under which the entropy source is expected to generate random data.
		  It will clearly describe the measures that have been taken in the
		  system design to ensure the entropy source continues to operate
		  under those conditions. Similarly, documentation shall describe
		  the conditions under which the entropy source is known to malfunction
		  or become inconsistent. Methods used to detect failure or degradation
		  of the source shall be included.
		</section>

		<section id="entropyhealthtesting" title="Health Testing">
		  More specifically, all entropy source health tests and their rationale
		  will be documented. This will include a description of the health tests,
		  the rate and conditions under which each health test is performed
		  (e.g., at startup, continuously, or on-demand), the expected results
		  for each health test, and rationale indicating why each test is
		  believed to be appropriate for detecting one or more failures in the
		  entropy source.
		</section>
  
	</appendix>

	<appendix id="apndx-equiv" title="Application Software Equivalency Guidelines">
		<section id="app-intro" title="Introduction">
			<h:p>
		  The purpose of equivalence in PP-based evaluations is to find a balance between evaluation rigor and commercial practicability—to 
		  ensure that evaluations meet customer expectations while recognizing that there is little to be gained from requiring that every 
		  variation in a product or platform be fully tested. If a product is found to be compliant with a PP on one platform, then all 
		  equivalent products on equivalent platforms are also considered to be compliant with the PP.
			</h:p><h:p>
		  A Vendor can make a claim of equivalence if the Vendor believes that a particular instance of their Product implements PP-specified 
		  security functionality in a way equivalent to the implementation of the same functionality on another instance of their Product on 
		  which the functionality was tested. The Product instances can differ in version number or feature level (model), or the instances may
		  run on different platforms. Equivalency can be used to reduce the testing required across claimed evaluated configurations. It can 
		  also be used during Assurance Maintenance to reduce testing needed to add more evaluated configurations to a certification.
			</h:p><h:p>
		  These equivalency guidelines do not replace Assurance Maintenance requirements or NIAP Policy #5 requirements for CAVP certificates. 
		  Nor may equivalency be used to leverage evaluations with expired certifications.
			</h:p><h:p>
		  These Equivalency Guidelines represent a shift from complete testing of all product instances to more of a risk-based approach. 
		  Rather than require that every combination of product and platform be tested, these guidelines support an approach that recognizes
		  that products are being used in a variety of environments—and often in cloud environments over where the vendor (and sometimes the 
		  customer) have little or no control over the underlying hardware. Developers should be responsible for the security functionality of 
		  their applications on the platforms they are developed for—whether that is an operating system, a virtual machine, or a software-based
		  execution environment such as a container. But those platforms may themselves run within other environments—virtual machines or
		  operating systems—that completely abstract away the underlying hardware from the application. The developer should not be held
		  accountable for security functionality that is implemented by platform layers that are abstracted away. The implication is that
		  not all security functionality will necessarily be tested for all platform layers down to the hardware for all evaluated
		  configurations—especially for applications developed for software-based execution environments such as containers. For these cases, 
		  the balancing of evaluation rigor and commercial practicability tips in favor of practicability. Note that this does not affect
		  the requirement that at least one product instance be fully tested on at least one platform with cryptography mapped to a CAVP 
		  certificate.
			</h:p><h:p>
		  Equivalency has two aspects:
			</h:p>
		  <h:ol>
			<h:li><h:b><h:i>Product Equivalence:</h:i></h:b> Products may be considered equivalent if there are no
			  differences between Product Models and Product Versions with respect to PP-specified security functionality.</h:li>
			<h:li><h:b><h:i>Platform Equivalence:</h:i></h:b> Platforms may be considered equivalent if there are no
			  significant differences in the services they provide to the Product—or in the way the platforms 
			  provide those services—with respect to PP-specified security functionality.</h:li>
		  </h:ol>
		  The equivalency determination is made in accordance with these guidelines by the Validator and Scheme using information provided by the Evaluator/Vendor.
		</section>
		<section id="approach" title="Approach to Equivalency Analysis">
			<h:p>
		  There are two scenarios for performing equivalency analysis. One is when a product has been certified and the vendor 
		  wants to show that a later product should be considered certified due to equivalence with the earlier product. The 
		  other is when multiple product variants are going though evaluation together and the vendor would like to reduce 
		  the amount of testing that must be done. The basic rules for determining equivalence are the same in both cases. 
		  But there is one additional consideration that applies to equivalence with previously certified products. That is, 
		  the product with which equivalence is being claimed must have a valid certification in accordance with scheme rules
		  and the Assurance Maintenance process must be followed. If a product’s certification has expired, then equivalence 
		  cannot be claimed with that product.
			</h:p><h:p>
		  When performing equivalency analysis, the Evaluator/Vendor should first use the factors and guidelines for Product
		  Model equivalence to determine the set of Product Models to be evaluated. In general, Product Models that do not differ 
		  in PP-specified security functionality are considered equivalent for purposes of evaluation against the AppPP.
			</h:p><h:p>
		  If multiple revision levels of Product Models are to be evaluated—or to determine whether a revision of an evaluated 
		  product needs re-evaluation—the Evaluator/Vendor and Validator should use the factors and guidelines for Product 
		  Version equivalence to analyze whether Product Versions are equivalent.
			</h:p><h:p>
		  Having determined the set of Product Models and Versions to be evaluated, the next step is to determine the set of
		  Platforms that the Products must be tested on.
			</h:p><h:p>
		  Each non-equivalent Product for which compliance is claimed must be fully tested on each non-equivalent platform 
		  for which compliance is claimed. For non-equivalent Products on equivalent platforms, only the differences that
		  affect PP-specified security functionality must be tested for each product.
			</h:p><h:p>
		  <h:b><h:i>“Differences in PP-Specified Security Functionality” Defined</h:i></h:b>
			</h:p><h:p>
		  If PP-specified security functionality is implemented by the TOE, then differences in the actual implementation
		  between versions or product models break equivalence for that feature. Likewise, if the TOE implements the 
		  functionality in one version or model and the functionality is implemented by the platform in another version 
		  or model, then equivalence is broken. If the functionality is implemented by the platform in multiple models or 
		  versions on equivalent platforms, then the functionality is considered different if the product invokes the platform 
		  differently to perform the function.
			</h:p>
		</section>
		<section id="modelequiv" title="Specific Guidance for Determining Product Model Equivalence">
		  <h:p>
		  Product Model equivalence attempts to determine whether different feature levels of the same product across 
		  a product line are equivalent for purposes of PP testing. For example, if a product has a “basic” edition and an “enterprise” 
		  edition, is it necessary to test both models? Or does testing one model provide sufficient assurance that both models 
		  are compliant?
		  </h:p><h:p>
		  Product models are considered equivalent if there are no differences that affect PP-specified security 
		  functionality—as indicated in Table 1.
		  </h:p><h:p>
		  
		  <h:table border="1">
			<h:tr class="header" bgcolor="#cccccc">
			  <h:td valign="top">Factor</h:td>
			  <h:td valign="top">Same/Different</h:td>
			  <h:td valign="top">Guidance</h:td>
			</h:tr>
			<h:tr>
			  <h:td rowspan="2" valign="top">PP-Specified Functionality</h:td>
			  <h:td valign="top">Same</h:td>
			  <h:td valign="top">If the differences between Models affect only non-PP-specified functionality, then the Models are equivalent. </h:td>
			</h:tr>
			<h:tr>
			  <h:td valign="top">Different</h:td>
			  <h:td valign="top">If PP-specified security functionality is affected by the differences between Models, 
				then the Models are not equivalent and must be tested separately. It is necessary only to test the functionality 
				affected by the software differences. If only differences are tested, then the differences must be enumerated, 
				and for each difference the Vendor must provide an explanation of why each difference does or does not affect 
				PP-specified functionality. If the Product Models are separately tested fully, then there is no need to document the differences. 
			  </h:td>
			</h:tr>
		  </h:table>
		  <h:b>Table 1. Determining Product Model Equivalence</h:b>
		  </h:p>
		</section>
		<section id="versionequiv" title="Specific Guidance for Determining Product Version Equivalence">
		  <h:p>
		  In cases of version equivalence, differences are expressed in terms of changes implemented in revisions 
		  of an evaluated Product. In general, versions are equivalent if the changes have no effect on any 
		  security-relevant claims about the TOE or assurance evidence. Non-security-relevant changes to TOE 
		  functionality or the addition of non-security-relevant functionality does not affect equivalence.
		  </h:p><h:p>
		  <h:table border="1">
			<h:tr class="header" bgcolor="#cccccc">
			  <h:td valign="top">Factor</h:td>
			  <h:td valign="top">Same/Different</h:td>
			  <h:td valign="top">Guidance</h:td>
			</h:tr>
			<h:tr valign="top">
			  <h:td valign="top">Product Models</h:td>
			  <h:td valign="top">Different</h:td>
			  <h:td valign="top">Versions of different Product Models are not equivalent unless the Models are equivalent as defined in Section 3.</h:td>
			</h:tr>
			<h:tr>
			  <h:td rowspan="2" valign="top">PP-Specified Functionality</h:td>
			  <h:td valign="top">Same</h:td>
			  <h:td valign="top">If the differences affect only non-PP-specified functionality, then the Versions are equivalent. </h:td>
			</h:tr>
			<h:tr>
			  <h:td valign="top">Different</h:td>
			  <h:td valign="top">If PP-specified security functionality is affected by the differences, then the 
				Versions are not considered equivalent and must be tested separately. It is necessary only to test 
				the functionality affected by the changes. If only the differences are tested, then for each 
				difference the Vendor must provide an explanation of why the difference does or does not affect 
				PP-specified functionality. If the Product Versions are separately tested fully, then there is 
				no need to document the differences. </h:td>
			</h:tr>
		  </h:table>
		  <h:b>Table 2. Factors for Determining Product Version Equivalence</h:b>
		  </h:p>
		</section>
		<section id="platformequiv" title="Specific Guidance for Determining Platform Equivalence">
		  <h:p>
		  Platform equivalence is used to determine the platforms that equivalent versions of a Product must be tested on. 
		  Platform equivalence analysis done for one software application cannot be applied to another software application.
		  Platform equivalence is not general—it is with respect to a particular application. 
		  </h:p><h:p>
		  Product Equivalency analysis must already have been done and Products have been determined to be equivalent.
		  </h:p><h:p>
		  The platform can be hardware or virtual hardware, an operating system or similar entity, or a software execution 
		  environment such as a container. For purposes of determining equivalence for software applications, we address each
		  type of platform separately. In general, platform equivalence is based on differences in the interfaces between the 
		  TOE and Platform that are relevant to the implementation of PP-specified security functionality.
		  </h:p>
		  <section id="hardware-equiv" title="Platform Equivalence—Hardware/Virtual Hardware Platforms">
			<h:p>
				If an application runs directly on hardware without an operating system—or directly on virtualized 
			hardware without an operating system—then platform equivalence is based on processor architecture and 
			instruction sets. In the case of virtualized hardware, it is the virtualized processor and architecture 
			that are presented to the application that matters—not the physical hardware.
		  </h:p><h:p>
			Platforms with different processor architectures and instruction sets are not equivalent. This is not 
			likely to be an issue for equivalency analysis for applications since there is likely to be a different 
			version of the application for different hardware environments.
			Equivalency analysis becomes important when comparing processors with the same architecture. Processors 
			with the same architecture that have instruction sets that are subsets or supersets of each other are not
			disqualified from being equivalent for purposes of an App evaluation. If the application takes the same 
			code paths when executing PP-specified security functionality on different processors of the same family, 
			then the processors can be considered equivalent with respect to that application.
			For example, if an application follows one code path on platforms that support the AES-NI instruction 
			and another on platforms that do not, then those two platforms are not equivalent with respect to that 
			application functionality. But if the application follows the same code path whether or not the platform 
			supports AES-NI, then the platforms are equivalent with respect to that functionality.
		  </h:p><h:p>
			The platforms are equivalent with respect to the application if the platforms are equivalent with respect to all PP-specified
			security functionality.
			<h:table border="1">
			  <h:tr class="header" bgcolor="#cccccc">
				<h:td valign="top">Factor</h:td>
				<h:td valign="top">Same/Different/None</h:td>
				<h:td valign="top">Guidance</h:td>
			  </h:tr>
			  <h:tr valign="top">
				<h:td valign="top">Platform Architectures</h:td>
				<h:td valign="top">Different</h:td>
				<h:td valign="top">Platforms that present different processor architectures and instruction sets to the application are not equivalent.</h:td>
			  </h:tr>
			  <h:tr>
				<h:td valign="top">PP-Specified Functionality</h:td>
				<h:td valign="top">Same</h:td>
				<h:td valign="top">For platforms with the same processor architecture, the platforms are equivalent with
				  respect to the application if execution of all PP-specified security functionality follows the same code path on both platforms.</h:td>
			  </h:tr>
			</h:table>
			<h:b>Table 3. Factors for Determining Hardware/Virtual Hardware Platform Equivalence</h:b>
		  </h:p>
		  </section>
		  <section id="os-equiv" title="Platform Equivalence—OS Platforms">
			<h:p>
			For traditional applications that are built for and run on operating systems, platform equivalence is 
			determined by the interfaces between the application and the operating system that are relevant to PP-specified 
			security functionality. Generally, these are the processor interface, device interfaces, and OS APIs. The following 
			factors applied in order:
			
			<h:table border="1">
			  <h:tr class="header" bgcolor="#cccccc">
				<h:td valign="top">Factor</h:td>
				<h:td valign="top">Same/Different/None</h:td>
				<h:td valign="top">Guidance</h:td>
			  </h:tr>
			  <h:tr valign="top">
				<h:td valign="top">Platform Architectures</h:td>
				<h:td valign="top">Different</h:td>
				<h:td valign="top">Platforms that run on different processor architectures and instruction sets are not equivalent.</h:td>
			  </h:tr>
			  <h:tr valign="top">
				<h:td valign="top">Platform Vendors</h:td>
				<h:td valign="top">Different</h:td>
				<h:td valign="top">Platforms from different vendors are not equivalent. </h:td>
			  </h:tr>
			  <h:tr valign="top">
				<h:td valign="top">Platform Versions</h:td>
				<h:td valign="top">Different</h:td>
				<h:td valign="top">Platforms from the same vendor with different major version numbers are not equivalent.</h:td>
			  </h:tr>
			  <h:tr valign="top">
				<h:td valign="top">Platform Interfaces</h:td>
				<h:td valign="top">Different</h:td>
				<h:td valign="top">Platforms from the same vendor and major version are not equivalent if there are
				  differences in device interfaces and OS APIs that are relevant to the way the platform provides PP-specified 
				  security functionality to the application. </h:td>
			  </h:tr>
			  <h:tr valign="top">
				<h:td valign="top">Platform Interfaces</h:td>
				<h:td valign="top">Same</h:td>
				<h:td valign="top">Platforms from the same vendor and major version are equivalent if there are 
				  no differences in device interfaces and OS APIs that are relevant to the way the platform 
				  provides PP-specified security functionality to the application, or if the Platform does 
				  not provide such functionality to the application.</h:td>
			  </h:tr>
			  
			</h:table>
			<h:b>Table 4. Factors for Determining OS/VS Platform Equivalence</h:b>
			</h:p>
		
		  </section>
		  <section id="software-equiv" title="Software-based Execution Environment Platform Equivalence">
			<h:p>
			If an Application is built for and runs in a non-OS software-based execution environment, such as a Container or 
			Java Runtime, then the below criteria must be used to determine platform equivalence. The key point is that the 
			underlying hardware (virtual or physical) and OS is not relevant to platform equivalence. This allows applications 
			to be tested and run on software-based execution environments on any hardware—as in cloud deployments.
			
			<h:table border="1">
			  <h:tr class="header" bgcolor="#cccccc">
				<h:td valign="top">Factor</h:td>
				<h:td valign="top">Same/Different/None</h:td>
				<h:td valign="top">Guidance</h:td>
			  </h:tr>
			  <h:tr valign="top">
				<h:td valign="top">Platform Type/Vendor</h:td>
				<h:td valign="top">Different</h:td>
				<h:td valign="top">Software-based execution environments that are substantially different or come 
				  from different vendors are not equivalent. For example, a Java virtual machine is not the same as a 
				  container. A Docker container is not the same as a CoreOS container.</h:td>
			  </h:tr>
			  <h:tr valign="top">
				<h:td valign="top">Platform Versions</h:td>
				<h:td valign="top">Different</h:td>
				<h:td valign="top">Execution environments that are otherwise equivalent are not equivalent if they have 
				  different major version numbers.</h:td>
			  </h:tr>
			  <h:tr valign="top">
				<h:td valign="top">PP-Specified Security Functionality</h:td>
				<h:td valign="top">Same</h:td>
				<h:td valign="top">All other things being equal, execution environments are equivalent if there is no 
				  significant difference in the interfaces through which the environments provide PP-specified security 
				  functionality to applications.</h:td>
			  </h:tr>
			</h:table>
			<h:b>Table 5. Factors for Software-based Execution Environment Platform Equivalence</h:b>
			</h:p>
		  </section>
		</section>
		<section id="specificity" title="Level of Specificity for Tested Configurations and Claimed Equivalent Configurations">
			<h:p>
		  In order to make equivalency determinations, the vendor and evaluator must agree on the equivalency claims. They must 
		  then provide the scheme with sufficient information about the TOE instances and platforms that were evaluated, and the 
		  TOE instances and platforms that are claimed to be equivalent.
			</h:p><h:p>
		  The ST must describe all configurations evaluated down to processor manufacturer, model number, and microarchitecture version. 
			</h:p><h:p>
		  The information regarding claimed equivalent configurations depends on the platform that the application was developed for and runs on.
			</h:p><h:p>
		  <h:b>Bare-Metal Applications</h:b>
			</h:p><h:p>
		  For applications that run without an operating system on bare-metal or virtual bare-metal, the claimed configuration must 
		  describe the platform down to the specific processor manufacturer, model number, and microarchitecture version. The Vendor
		  must describe the differences in the TOE with respect to PP-specified security functionality and how the TOE functions
		  differently to leverage platform differences (e.g., instruction set extensions) in the tested configuration versus the 
		  claimed equivalent configuration. 
			</h:p><h:p>
		  <h:b>Traditional Applications</h:b>
			</h:p><h:p>
		  For applications that run with an operating system as their immediate platform, the claimed configuration must describe 
		  the platform down to the specific operating system version. If the platform is a virtualization system, then the claimed 
		  configuration must describe the platform down to the specific virtualization system version. The Vendor must describe the 
		  differences in the TOE with respect to PP-specified security functionality and how the TOE functions differently to leverage
		  platform differences in the tested configuration versus the claimed equivalent configuration. Relevant platform differences 
		  could include instruction sets, device interfaces, and OS APIs invoked by the TOE to implement PP-specified security 
		  functionality.
			</h:p><h:p>
		  <h:b>Software-Based Execution Environments</h:b>
			</h:p><h:p>
		  For applications that run in a software-based execution environment such as a Java virtual machine or a Container, then 
		  the claimed configuration must describe the platform down to the specific version of the software execution environment. 
		  The Vendor must describe the differences in the TOE with respect to PP-specified security functionality and how the TOE 
		  functions differently to leverage platform differences in the tested configuration versus the claimed equivalent 
		  configuration.
			</h:p>
		</section>
	</appendix>

	<!-- Abbreviations appendix is auto generated here -->
	
	<!-- Bibliography is auto generated here with CC and CEM docs. If you want other docs -->
	<!-- included, add them here. -->
	<bibliography>
	  <cc-entry/>
      <entry id="bibCESG">
        <tag>CESG</tag>
        <description>CESG - <h:a href="https://www.gov.uk/government/collections/end-user-devices-security-guidance"> End
            User Devices Security and Configuration Guidance</h:a></description>
      </entry>
      <entry id="bibCSA">
        <tag>CSA</tag>
        <description>
          <h:a href="http://csrc.nist.gov/groups/SMA/ispab/documents/csa_87.txt">Computer Security Act
            of 1987</h:a>, H.R. 145, June 11, 1987. </description>
      </entry>
      <entry id="bibOMB">
        <tag>OMB</tag>
        <description>
          <h:a href="http://www.whitehouse.gov/sites/default/files/omb/memoranda/fy2006/m06-19.pdf">Reporting Incidents Involving Personally Identifiable Information and Incorporating the
            Cost for Security in Agency Information Technology Investments</h:a>, OMB M-06-19, July
          12, 2006. </description>
      </entry>
	</bibliography>

</Module>
